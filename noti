<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Notiqo</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="style.css">
    <style>
        :root {
            --primary-color: #4361ee;
            --secondary-color: #3f37c9;
            --accent-color: #4895ef;
            --light-color: #f8f9fa;
            --dark-color: #212529;
            --success-color: #4cc9f0;
            --warning-color: #f72585;
            --border-radius: 12px;
            --box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
            --dark-bg: #121212;
            --dark-card: #1e1e1e;
            --dark-text: #e0e0e0;
            --border-color: rgba(0, 0, 0, 0.1);
            --text-light: #666;
            --bg-light: #f5f5f5;
            --primary-hover: #3a56d4;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }

        body {
            background-color: #f5f7fa;
            color: var(--dark-color);
            overflow-x: hidden;
            transition: var(--transition);
            line-height: 1.6;
        }

        body.dark-mode {
            background-color: var(--dark-bg);
            color: var(--dark-text);
            --border-color: rgba(255, 255, 255, 0.1);
            --text-light: #aaa;
            --bg-light: #2d2d2d;
            --box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        }

        /* Header Styles */
        #header {
            background-color: white;
            padding: 1rem 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: var(--box-shadow);
            position: sticky;
            top: 0;
            z-index: 100;
            transition: var(--transition);
        }

        .dark-mode #header {
            background-color: var(--dark-card);
        }

        .logo {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--primary-color);
            display: flex;
            align-items: center;
            text-decoration: none;
        }

        .logo::before {
            content: "";
            display: inline-block;
            width: 30px;
            height: 30px;
            background-color: var(--primary-color);
            margin-right: 10px;
            border-radius: 50%;
        }

        .nav-icons {
            display: flex;
            gap: 1.5rem;
            position: relative;
        }

        .nav-icons i {
            font-size: 1.2rem;
            color: var(--dark-color);
            cursor: pointer;
            transition: var(--transition);
        }

        .dark-mode .nav-icons i {
            color: var(--dark-text);
        }

        .nav-icons i:hover {
            color: var(--primary-color);
            transform: scale(1.1);
        }

        /* Sidebar Styles */
        #sidebar {
            position: fixed;
            top: 0;
            left: -300px;
            width: 280px;
            height: 100vh;
            background-color: white;
            box-shadow: var(--box-shadow);
            z-index: 1000;
            transition: var(--transition);
            overflow-y: auto;
        }

        .dark-mode #sidebar {
            background-color: var(--dark-card);
        }

        #sidebar.show {
            left: 0;
        }

        .sidebar-header {
            padding: 1.5rem;
            background-color: var(--primary-color);
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .sidebar-header h2 {
            font-size: 1.3rem;
            font-weight: 600;
        }

        .sidebar-menu {
            list-style: none;
            padding: 1rem 0;
        }

        .sidebar-menu li {
            padding: 0.8rem 1.5rem;
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .dark-mode .sidebar-menu li {
            color: var(--dark-text);
        }

        .sidebar-menu li:hover {
            background-color: rgba(67, 97, 238, 0.1);
            color: var(--primary-color);
            padding-left: 1.8rem;
        }

        .dark-mode .sidebar-menu li:hover {
            background-color: rgba(67, 97, 238, 0.2);
        }

        .sidebar-menu li::before {
            content: "•";
            color: var(--primary-color);
            font-weight: bold;
            margin-right: 8px;
        }

        /* Main Content Styles */
        #main-content {
            flex: 1;
            padding: 1.5rem;
            padding-bottom: 80px;
            transition: var(--transition);
        }

        section {
            display: none;
            animation: fadeIn 0.5s ease;
            max-width: 800px;
            margin: 0 auto;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        section.active-section {
            display: block;
        }

        /* Post Styles */
        .post {
            background-color: white;
            border-radius: var(--border-radius);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: var(--box-shadow);
            transition: var(--transition);
            position: relative;
        }

        .dark-mode .post {
            background-color: var(--dark-card);
        }

        .post[data-bg-color] {
            color: white;
        }

        .post[data-bg-color="blue"] {
            background-color: #4361ee;
            color: black;
        }

        .post[data-bg-color="green"] {
            background-color: #2e7d32;
            color: black;
        }

        .post[data-bg-color="purple"] {
            background-color: #6a1b9a;
            color: black;
        }

        .post[data-bg-color="red"] {
            background-color: #c62828;
            color: black;
        }

        .post[data-bg-color="orange"] {
            background-color: #ef6c00;
            color: black;
        }

        .post:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }

        .dark-mode .post:hover {
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
        }

        .post-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .post-user {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: var(--primary-color);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            cursor: pointer;
        }

        .user-avatar.small {
            width: 32px;
            height: 32px;
            font-size: 14px;
        }

        .post[data-bg-color] .user-avatar {
            border: 2px solid white;
        }

        .user-name {
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
        }

        .post[data-bg-color] .user-name {
            color: white;
        }

        .user-name:hover {
            color: var(--primary-color);
        }

        .post-actions {
            position: relative;
        }

        .post-menu {
            cursor: pointer;
            padding: 5px;
            border-radius: 50%;
            transition: var(--transition);
            color: inherit;
            background: none;
            border: none;
        }

        .post-menu:hover {
            background-color: rgba(0, 0, 0, 0.1);
        }

        .dark-mode .post-menu:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .post-menu-options {
            position: absolute;
            right: 0;
            top: 100%;
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 0.5rem 0;
            z-index: 10;
            display: none;
            min-width: 120px;
        }

        .dark-mode .post-menu-options {
            background-color: var(--dark-card);
        }

        .post-menu-options.show {
            display: block;
            animation: fadeIn 0.3s ease;
        }

        .post-menu-options button {
            background: none;
            border: none;
            width: 100%;
            text-align: left;
            padding: 0.5rem 1rem;
            cursor: pointer;
            transition: var(--transition);
            color: inherit;
            font-family: 'Poppins', sans-serif;
        }

        .post-menu-options button:hover {
            background-color: rgba(67, 97, 238, 0.1);
            color: var(--primary-color);
        }

        .dark-mode .post-menu-options button:hover {
            background-color: rgba(67, 97, 238, 0.2);
        }

        .post-menu-options button.delete {
            color: var(--warning-color);
        }

        .post-content {
            margin-bottom: 1rem;
            line-height: 1.6;
        }

        .post-description {
            margin-bottom: 1rem;
            word-wrap: break-word;
        }

        .post-description.collapsed {
            max-height: 100px;
            overflow: hidden;
            position: relative;
        }

        .post-description.collapsed::after {
            content: "";
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 30px;
            background: linear-gradient(to bottom, rgba(255, 255, 255, 0), white);
        }

        .dark-mode .post-description.collapsed::after {
            background: linear-gradient(to bottom, rgba(0, 0, 0, 0), var(--dark-card));
        }

        .post[data-bg-color] .post-description.collapsed::after {
            background: linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.5));
        }

        .read-more {
            color: var(--primary-color);
            cursor: pointer;
            font-weight: 500;
            margin-top: 5px;
            display: inline-block;
            background: none;
            border: none;
            padding: 0;
        }

        .post[data-bg-color] .read-more {
            color: white;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
        }

        .post-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-top: 1px solid var(--border-color);
            padding-top: 1rem;
        }

        .post-stats {
            display: flex;
            gap: 1.5rem;
        }

        .post-stat {
            display: flex;
            align-items: center;
            gap: 5px;
            cursor: pointer;
            transition: var(--transition);
            color: inherit;
            background: none;
            border: none;
            padding: 0;
        }

        .post-stat:hover {
            color: var(--primary-color);
        }

        .post[data-bg-color] .post-stat:hover {
            opacity: 0.8;
        }

        .post-stat i {
            font-size: 1.1rem;
        }

        .post-stat .liked {
            color: var(--warning-color);
        }

        .post[data-bg-color] .post-stat .liked {
            color: white;
        }

        /* Post Form Styles */
        .post-form-container {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 2000;
            transition: var(--transition);
        }

        .post-form-container.show {
            display: flex;
        }

        .post-form {
            background-color: white;
            border-radius: var(--border-radius);
            width: 90%;
            max-width: 600px;
            padding: 2rem;
            box-shadow: var(--box-shadow);
            animation: fadeIn 0.3s ease;
        }

        .dark-mode .post-form {
            background-color: var(--dark-card);
        }

        .post-form-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border-color);
        }

        .post-form-title {
            font-size: 1.3rem;
            font-weight: 600;
            color: var(--primary-color);
        }

        .post-form-close {
            font-size: 1.5rem;
            cursor: pointer;
            transition: var(--transition);
            background: none;
            border: none;
            color: inherit;
        }

        .post-form-close:hover {
            color: var(--warning-color);
            transform: rotate(90deg);
        }

        #postForm {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        #postForm input,
        #postForm textarea {
            padding: 0.8rem 1rem;
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
            font-size: 1rem;
            transition: var(--transition);
            background-color: white;
            color: var(--dark-color);
            font-family: 'Poppins', sans-serif;
        }

        .dark-mode #postForm input,
        .dark-mode #postForm textarea {
            background-color: var(--dark-card);
            color: var(--dark-text);
        }

        #postForm input:focus,
        #postForm textarea:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(67, 97, 238, 0.2);
        }

        #postForm textarea {
            min-height: 150px;
            resize: vertical;
        }

        #postForm button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 0.8rem;
            border-radius: var(--border-radius);
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
        }

        #postForm button:hover {
            background-color: var(--secondary-color);
            transform: translateY(-2px);
        }

        .color-options {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .color-option {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid transparent;
            transition: var(--transition);
        }

        .color-option:hover {
            transform: scale(1.1);
        }

        .color-option.selected {
            border-color: var(--dark-color);
            transform: scale(1.1);
        }

        .dark-mode .color-option.selected {
            border-color: var(--dark-text);
        }

        .color-option[data-color="default"] {
            background-color: white;
            border: 1px solid var(--border-color);
        }

        .dark-mode .color-option[data-color="default"] {
            background-color: var(--dark-card);
            border-color: var(--border-color);
        }

        .color-option[data-color="blue"] {
            background-color: #4361ee;
        }

        .color-option[data-color="green"] {
            background-color: #2e7d32;
        }

        .color-option[data-color="purple"] {
            background-color: #6a1b9a;
        }

        .color-option[data-color="red"] {
            background-color: #c62828;
        }

        .color-option[data-color="orange"] {
            background-color: #ef6c00;
        }

        /* Bottom Navigation Styles */
        .bottom-nav {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background-color: white;
            display: flex;
            justify-content: space-around;
            align-items: center;
            padding: 1rem 0;
            box-shadow: 0 -5px 20px rgba(0, 0, 0, 0.1);
            z-index: 50;
        }

        .dark-mode .bottom-nav {
            background-color: var(--dark-card);
        }

        .bottom-nav i {
            font-size: 1.4rem;
            color: var(--dark-color);
            cursor: pointer;
            transition: var(--transition);
            padding: 0.5rem;
            border-radius: 50%;
        }

        .dark-mode .bottom-nav i {
            color: var(--dark-text);
        }

        .bottom-nav i:hover,
        .bottom-nav i.active {
            color: var(--primary-color);
            transform: translateY(-5px);
        }

        .bottom-nav i.fa-plus-circle {
            background-color: var(--primary-color);
            color: white;
            padding: 1rem;
            border-radius: 50%;
            box-shadow: 0 4px 15px rgba(67, 97, 238, 0.4);
            transform: translateY(-20px);
        }

        .bottom-nav i.fa-plus-circle:hover {
            transform: translateY(-25px);
            box-shadow: 0 6px 20px rgba(67, 97, 238, 0.5);
        }

        /* Profile Section Styles */
        .profile-header {
            display: flex;
            gap: 2rem;
            margin-bottom: 2rem;
            align-items: center;
        }

        .profile-picture-container {
            position: relative;
        }

        .user-avatar.profile {
            width: 100px;
            height: 100px;
            font-size: 2.5rem;
        }

        .user-details {
            flex: 1;
        }

        .user-details h2 {
            margin-bottom: 1rem;
            color: var(--primary-color);
        }

        .user-details p {
            margin-bottom: 0.5rem;
        }

        .user-bio {
            margin: 1rem 0;
            padding: 0.5rem;
            background-color: rgba(0, 0, 0, 0.05);
            border-radius: var(--border-radius);
            max-width: 100%;
            word-wrap: break-word;
        }

        .dark-mode .user-bio {
            background-color: rgba(255, 255, 255, 0.05);
        }

        .profile-actions {
            display: flex;
            gap: 1rem;
            margin: 1rem 0;
        }

        .profile-stats {
            display: flex;
            gap: 1.5rem;
            margin: 1rem 0;
        }

        .profile-stat {
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .profile-stat:hover {
            color: var(--primary-color);
        }

        /* Auth Modal Styles */
        .auth-modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 2000;
            opacity: 0;
            visibility: hidden;
            transition: var(--transition);
        }

        .auth-modal.show {
            opacity: 1;
            visibility: visible;
        }

        .auth-container {
            background-color: white;
            border-radius: var(--border-radius);
            width: 90%;
            max-width: 400px;
            padding: 2rem;
            box-shadow: var(--box-shadow);
            transform: translateY(-20px);
            transition: var(--transition);
        }

        .dark-mode .auth-container {
            background-color: var(--dark-card);
        }

        .auth-modal.show .auth-container {
            transform: translateY(0);
        }

        .auth-tabs {
            display: flex;
            margin-bottom: 1.5rem;
            border-bottom: 1px solid var(--border-color);
        }

        .auth-tab {
            padding: 0.5rem 1rem;
            cursor: pointer;
            font-weight: 500;
            color: var(--text-light);
            transition: var(--transition);
            background: none;
            border: none;
        }

        .auth-tab.active {
            color: var(--primary-color);
            border-bottom: 2px solid var(--primary-color);
        }

        .auth-form {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .auth-form input {
            padding: 0.8rem 1rem;
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
            font-size: 1rem;
            background-color: white;
            color: var(--dark-color);
            font-family: 'Poppins', sans-serif;
        }

        .dark-mode .auth-form input {
            background-color: var(--dark-card);
            color: var(--dark-text);
        }

        .auth-form button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 0.8rem;
            border-radius: var(--border-radius);
            font-weight: 600;
            cursor: pointer;
            margin-top: 1rem;
        }

        .auth-form button:hover {
            background-color: var(--secondary-color);
        }

        .auth-footer {
            text-align: center;
            margin-top: 1rem;
            font-size: 0.9rem;
        }

        .auth-footer a {
            color: var(--primary-color);
            font-weight: 500;
            cursor: pointer;
            text-decoration: none;
        }

        /* Responsive Styles */
        @media (max-width: 768px) {
            .profile-header {
                flex-direction: column;
                align-items: flex-start;
            }

            .user-details {
                width: 100%;
            }

            #sidebar {
                width: 250px;
            }
        }

        /* Loading Animation */
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(67, 97, 238, 0.3);
            border-radius: 50%;
            border-top-color: var(--primary-color);
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        /* Empty State Styles */
        .empty-state {
            text-align: center;
            padding: 3rem 1rem;
            color: var(--text-light);
        }

        .empty-state i {
            font-size: 3rem;
            color: var(--border-color);
            margin-bottom: 1rem;
        }

        .empty-state h3 {
            margin-bottom: 0.5rem;
            font-weight: 500;
        }

        .empty-state p {
            margin-bottom: 1rem;
        }

        /* Notification Badge */
        .badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background-color: var(--warning-color);
            color: white;
            border-radius: 50%;
            width: 18px;
            height: 18px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.7rem;
            font-weight: bold;
        }

        /* Follow Button */
        .follow-btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: var(--border-radius);
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
        }

        .follow-btn:hover {
            background-color: var(--secondary-color);
        }

        .follow-btn.following {
            background-color: #e9ecef;
            color: var(--dark-color);
        }

        .dark-mode .follow-btn.following {
            background-color: #333;
            color: var(--dark-text);
        }

        .follow-btn:disabled {
            background-color: #e9ecef;
            cursor: not-allowed;
        }

        .dark-mode .follow-btn:disabled {
            background-color: #333;
        }

        /* Find Users Section */
        .user-list {
            margin-top: 1rem;
        }

        .user-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1rem;
            border-bottom: 1px solid var(--border-color);
            transition: var(--transition);
        }

        .user-item:hover {
            background-color: rgba(0, 0, 0, 0.05);
        }

        .dark-mode .user-item:hover {
            background-color: rgba(255, 255, 255, 0.05);
        }

        .user-item-info {
            display: flex;
            align-items: center;
            gap: 1rem;
            flex: 1;
        }

        .user-item-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background-color: var(--primary-color);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 1.2rem;
        }

        .user-item-name {
            font-weight: 600;
            cursor: pointer;
        }

        .user-item-username {
            color: var(--text-light);
            font-size: 0.9rem;
        }

        /* Notifications Section */
        .notification-item {
            padding: 1rem;
            border-bottom: 1px solid var(--border-color);
            transition: var(--transition);
            cursor: pointer;
        }

        .notification-item.unread {
            background-color: rgba(67, 97, 238, 0.05);
        }

        .notification-item:hover {
            background-color: rgba(0, 0, 0, 0.05);
        }

        .dark-mode .notification-item:hover {
            background-color: rgba(255, 255, 255, 0.05);
        }

        .notification-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
        }

        .notification-time {
            font-size: 0.8rem;
            color: var(--text-light);
        }

        .notification-content {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .notification-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: var(--primary-color);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }

        .notification-text {
            flex: 1;
        }

        .notification-actions {
            display: flex;
            gap: 0.5rem;
            margin-top: 0.5rem;
        }

        /* Settings Section */
        .settings-container {
            max-width: 800px;
            margin: 0 auto;
        }

        .settings-title {
            margin-bottom: 2rem;
            color: var(--primary-color);
        }

        .settings-form {
            display: flex;
            flex-direction: column;
            gap: 2rem;
        }

        .settings-section {
            background-color: white;
            padding: 1.5rem;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
        }

        .dark-mode .settings-section {
            background-color: var(--dark-card);
        }

        .settings-subtitle {
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: var(--primary-color);
        }

        .settings-section label {
            display: block;

            margin-bottom: 0.5rem;
            font-weight: 500;
        }

        .settings-section input[type="text"],
        .settings-section input[type="email"],
        .settings-section input[type="password"],
        .settings-section select,
        .settings-section textarea {
            width: 100%;
            padding: 0.8rem;
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
            margin-bottom: 1rem;
            background-color: white;
            color: var(--dark-color);
            font-family: 'Poppins', sans-serif;
        }

        .dark-mode .settings-section input,
        .dark-mode .settings-section select,
        .dark-mode .settings-section textarea {
            background-color: var(--dark-card);
            color: var(--dark-text);
        }

        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
            margin-right: 1rem;
        }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .toggle-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }

        .toggle-slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked+.toggle-slider {
            background-color: var(--primary-color);
        }

        input:checked+.toggle-slider:before {
            transform: translateX(26px);
        }

        .toggle-label {
            display: flex;

            align-items: center;
            margin-bottom: 1rem;
        }

        .toggle-text {
            flex: 1;
        }

        /* Search Section */
        .search-area {
            display: flex;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .search-area input {
            flex: 1;
            padding: 0.8rem 1rem;
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
            font-size: 1rem;
            background-color: white;
            color: var(--dark-color);
        }

        .search-area button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 0 1.5rem;
            border-radius: var(--border-radius);
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
        }

        .search-area button:hover {
            background-color: var(--secondary-color);
        }

        .search-results {
            margin-top: 1.5rem;
        }

        /* Skeleton Loading */
        .skeleton {
            animation: skeleton-loading 1s linear infinite alternate;
            opacity: 0.7;
            border-radius: var(--border-radius);
        }

        @keyframes skeleton-loading {
            0% {
                background-color: hsl(200, 20%, 70%);
            }

            100% {
                background-color: hsl(200, 20%, 95%);
            }
        }

        .dark-mode .skeleton {
            animation: skeleton-loading-dark 1s linear infinite alternate;
        }

        @keyframes skeleton-loading-dark {
            0% {
                background-color: hsl(200, 20%, 20%);
            }

            100% {
                background-color: hsl(200, 20%, 35%);
            }
        }

        .skeleton-post {
            height: 200px;
            margin-bottom: 1.5rem;
        }

        .skeleton-user {
            height: 80px;
            margin-bottom: 1rem;
        }

        /* Section Header */
        .section-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 1.5rem;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--primary-color);
        }

        .section-back {
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 50%;
            transition: var(--transition);
            background: none;
            border: none;
            color: inherit;
        }

        .section-back:hover {
            background-color: rgba(0, 0, 0, 0.1);
        }

        .dark-mode .section-back:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        /* Custom Modal */
        .custom-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 999;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease;
        }

        .custom-modal.show {
            opacity: 1;
            pointer-events: all;
        }

        .custom-modal-content {
            background-color: white;
            border-radius: 12px;
            width: 90%;
            max-width: 400px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2);
            overflow: hidden;
            transform: translateY(20px);
            transition: transform 0.3s ease;
        }

        .dark-mode .custom-modal-content {
            background-color: var(--dark-card);
        }

        .custom-modal.show .custom-modal-content {
            transform: translateY(0);
        }

        .custom-modal-header {
            padding: 16px 20px;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .custom-modal-header h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
        }

        .close-modal {
            font-size: 24px;
            cursor: pointer;
            color: var(--text-light);
            background: none;
            border: none;
        }

        .custom-modal-body {
            padding: 20px;
            max-height: 60vh;
            overflow-y: auto;
            line-height: 1.5;
        }

        .custom-modal-footer {
            padding: 16px 20px;
            border-top: 1px solid var(--border-color);
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

        .custom-modal-footer button {
            padding: 8px 16px;
            border-radius: 6px;
            border: none;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s;
            font-family: 'Poppins', sans-serif;
        }

        .custom-modal-footer button:first-child {
            background-color: var(--border-color);
            color: var(--dark-color);
        }

        .dark-mode .custom-modal-footer button:first-child {
            color: var(--dark-text);
        }

        .custom-modal-footer button:last-child {
            background-color: var(--primary-color);
            color: white;
        }

        .custom-modal-footer button:last-child:hover {
            background-color: var(--primary-hover);
        }

        /* Warning/Error Modals */
        .custom-modal.warning .custom-modal-header {
            background-color: var(--warning-color);
            color: white;
        }

        .custom-modal.warning .close-modal {
            color: white;
        }

        /* Comments Section */
        .comments-list {
            max-height: 400px;
            overflow-y: auto;
            padding: 10px;
        }

        .comment-item {
            padding: 12px 0;
            border-bottom: 1px solid var(--border-color);
        }

        .comment-item:last-child {
            border-bottom: none;
        }

        .comment-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .comment-user {
            display: flex;
            align-items: center;
            gap: 10px;
            cursor: pointer;
        }

        .comment-user .user-name {
            font-weight: 500;
            font-size: 14px;
        }

        .comment-user small {
            font-size: 12px;
            color: var(--text-light);
        }

        .comment-actions {
            color: var(--text-light);
            cursor: pointer;
            background: none;
            border: none;
            padding: 0;
        }

        .comment-actions:hover {
            color: var(--warning-color);
        }

        .comment-content {
            margin-left: 42px;
            font-size: 14px;
            line-height: 1.5;
            word-break: break-word;
        }

        .comment-footer {
            margin-left: 42px;
            margin-top: 8px;
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .comment-stat {
            display: inline-flex;
            align-items: center;
            gap: 5px;
            font-size: 12px;
            color: var(--text-light);
            cursor: pointer;
            background: none;
            border: none;
            padding: 0;
        }

        .comment-stat i {
            font-size: 14px;
        }

        .comment-stat:hover {
            color: var(--primary-color);
        }

        .comment-stat i.liked {
            color: var(--warning-color);
        }

        .comment-form {
            padding: 15px;
            border-top: 1px solid var(--border-color);
        }

        .comment-form textarea {
            width: 100%;
            padding: 10px;
            border-radius: 8px;
            border: 1px solid var(--border-color);
            background-color: var(--bg-light);
            color: var(--dark-color);
            resize: none;
            min-height: 60px;
            margin-bottom: 10px;
            font-family: 'Poppins', sans-serif;
        }


        /* Comment dropdown menu */
        .comment-menu-options {
            display: none;
            position: absolute;
            right: 10px;
            background-color: white;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            z-index: 100;
        }

        .dark-mode .comment-menu-options {
            background-color: var(--dark-card);
        }

        .comment-menu-options.show {
            display: block;
        }

        .comment-menu-options button {
            display: block;
            width: 100%;
            padding: 8px 16px;
            text-align: left;
            background: none;
            border: none;
            color: var(--dark-color);
            cursor: pointer;
            font-family: 'Poppins', sans-serif;
        }

        .dark-mode .comment-menu-options button {
            color: var(--dark-text);
        }

        .comment-menu-options button:hover {
            background-color: var(--bg-light);
        }

        .comment-menu-options button i {
            margin-right: 8px;
        }

        .comment-menu-options button.delete {
            color: var(--warning-color);
        }

        /* Loading Overlay */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1001;
        }

        .loading-content {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            max-width: 300px;
            width: 90%;
        }

        .dark-mode .loading-content {
            background-color: var(--dark-card);
        }

        .loading-spinner {
            width: 40px;
            height: 40px;
            border: 4px solid var(--border-color);
            border-top-color: var(--primary-color);
            border-radius: 50%;
            margin: 0 auto 15px;
            animation: spin 1s linear infinite;
        }

        /* Enhanced Post Styles */
        .post[data-bg-color="blue"] {
            background-color: #f0f8ff;
            border-left: 4px solid #1e90ff;
        }

        .post[data-bg-color="green"] {
            background-color: #f0fff4;
            border-left: 4px solid #2ecc71;
        }

        .post[data-bg-color="purple"] {
            background-color: #f8f0ff;
            border-left: 4px solid #9b59b6;
        }

        .post[data-bg-color="red"] {
            background-color: #fff0f0;
            border-left: 4px solid #e74c3c;
        }

        .post[data-bg-color="orange"] {
            background-color: #fff8f0;
            border-left: 4px solid #e67e22;
        }

        .dark-mode .post[data-bg-color="blue"] {
            background-color: rgba(30, 144, 255, 0.1);
        }

        .dark-mode .post[data-bg-color="green"] {
            background-color: rgba(46, 204, 113, 0.1);
        }

        .dark-mode .post[data-bg-color="purple"] {
            background-color: rgba(155, 89, 182, 0.1);
        }

        .dark-mode .post[data-bg-color="red"] {
            background-color: rgba(231, 76, 60, 0.1);
        }

        .dark-mode .post[data-bg-color="orange"] {
            background-color: rgba(230, 126, 34, 0.1);
        }

        /* Edit post modal */
        .edit-post-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease;
        }

        .edit-post-modal.show {
            opacity: 1;
            pointer-events: all;
        }

        .edit-post-content {
            background-color: white;
            border-radius: 12px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2);
            overflow: hidden;
            transform: translateY(20px);
            transition: transform 0.3s ease;
        }

        .dark-mode .edit-post-content {
            background-color: var(--dark-card);
        }

        .edit-post-modal.show .edit-post-content {
            transform: translateY(0);
        }

        .edit-post-header {
            padding: 16px 20px;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .edit-post-header h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
        }

        .edit-post-body {
            padding: 20px;
            max-height: 60vh;
            overflow-y: auto;
        }

        .edit-post-footer {
            padding: 16px 20px;
            border-top: 1px solid var(--border-color);
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

        .edit-post-footer button {
            padding: 8px 16px;
            border-radius: 6px;
            border: none;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s;
            font-family: 'Poppins', sans-serif;
        }

        .edit-post-footer button.cancel {
            background-color: var(--border-color);
            color: var(--dark-color);
        }

        .dark-mode .edit-post-footer button.cancel {
            color: var(--dark-text);
        }

        .edit-post-footer button.save {
            background-color: var(--primary-color);
            color: white;
        }

        .edit-post-footer button.save:hover {
            background-color: var(--primary-hover);
        }

        /* Reply form */
        .reply-form {
            margin-top: 10px;
            padding-left: 42px;
            display: none;
        }

        .reply-form.show {
            display: block;
        }

        .reply-form textarea {
            width: 100%;
            padding: 8px;
            border-radius: 8px;
            border: 1px solid var(--border-color);
            background-color: var(--bg-light);
            color: var(--dark-color);
            resize: none;
            min-height: 50px;
            margin-bottom: 8px;
            font-family: 'Poppins', sans-serif;
            font-size: 13px;
        }

        .reply-form button {
            padding: 6px 12px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 6px;
            font-size: 12px;
            cursor: pointer;
        }

        .reply-form button.cancel {
            background-color: var(--border-color);
            margin-right: 8px;
            color: var(--dark-color);
        }

        .dark-mode .reply-form button.cancel {
            color: var(--dark-text);
        }

        /* Accessibility Improvements */
        button:focus,
        input:focus,
        textarea:focus,
        select:focus,
        a:focus {
            outline: 2px solid var(--primary-color);
            outline-offset: 2px;
        }

        /* Utility Classes */
        .hidden {
            display: none !important;
        }

        .text-center {
            text-align: center;
        }

        .mt-1 {
            margin-top: 0.5rem;
        }

        .mt-2 {
            margin-top: 1rem;
        }

        .mb-1 {
            margin-bottom: 0.5rem;
        }

        .mb-2 {
            margin-bottom: 1rem;
        }

        .pointer {
            cursor: pointer;
        }

        /* Bottom Sheet Modal Styles */
        .bottom-sheet {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: flex-end;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }

        .bottom-sheet.show {
            opacity: 1;
            visibility: visible;
        }

        .bottom-sheet .auth-container,
        .bottom-sheet .custom-modal-content,
        .bottom-sheet .edit-post-content,
        .bottom-sheet .post-form {
            background: white;
            width: 100%;
            max-width: 100%;
            border-radius: 20px 20px 0 0;
            padding: 20px;
            max-height: 90vh;
            overflow-y: auto;
            transform: translateY(100%);
            transition: transform 0.3s ease;
            box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.15);
        }

        .bottom-sheet.show .auth-container,
        .bottom-sheet.show .custom-modal-content,
        .bottom-sheet.show .edit-post-content,
        .bottom-sheet.show .post-form {
            transform: translateY(0);
        }

        /* Dark mode support */
        .dark-mode .bottom-sheet .auth-container,
        .dark-mode .bottom-sheet .custom-modal-content,
        .dark-mode .bottom-sheet .edit-post-content,
        .dark-mode .bottom-sheet .post-form {
            background: var(--dark-bg-secondary);
            color: var(--dark-text);
            box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.3);
        }

        /* Auth Modal Specific Styles */
        .auth-modal .auth-container {
            max-width: 100%;
            margin: 0;
        }

        .auth-modal .auth-tabs {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }

        .auth-modal .auth-tab {
            padding: 10px 0;
            cursor: pointer;
            font-weight: 500;
            color: #666;
        }

        .auth-modal .auth-tab.active {
            color: var(--primary-color);
            border-bottom: 2px solid var(--primary-color);
        }

        .auth-modal .auth-tabs .fa-times {
            font-size: 1.2rem;
            color: #666;
            cursor: pointer;
            padding: 5px;
        }

        .auth-modal .auth-form {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .auth-modal input {
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
        }

        .auth-modal button {
            padding: 12px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
        }

        .auth-modal .auth-footer {
            text-align: center;
            margin-top: 15px;
        }

        .auth-modal .auth-footer a {
            color: var(--primary-color);
            text-decoration: none;
            font-size: 14px;
        }

        /* Custom Modal Styles */
        .custom-modal-content {
            padding: 0;
        }

        .custom-modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 20px 10px;
            border-bottom: 1px solid #eee;
        }

        .custom-modal-header h3 {
            margin: 0;
            font-size: 1.2rem;
        }

        .close-modal {
            font-size: 1.5rem;
            cursor: pointer;
            color: #666;
        }

        .custom-modal-body {
            padding: 20px;
            line-height: 1.5;
        }

        .custom-modal-footer {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            padding: 15px 20px;
            border-top: 1px solid #eee;
        }

        .custom-modal-footer button {
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
        }

        /* Edit Post Modal Styles */
        .edit-post-content {
            padding: 0;
        }

        .edit-post-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 20px 10px;
            border-bottom: 1px solid #eee;
        }

        .edit-post-header h3 {
            margin: 0;
        }

        .edit-post-body {
            padding: 20px;
        }

        .edit-post-footer {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            padding: 15px 20px;
            border-top: 1px solid #eee;
        }

        .edit-post-footer button {
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
        }

        /* Post Form Styles */
        .post-form-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: flex-end;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }

        .post-form-container.show {
            opacity: 1;
            visibility: visible;
        }

        .post-form {
            background: white;
            width: 100%;
            border-radius: 20px 20px 0 0;
            padding: 20px;
            max-height: 90vh;
            overflow-y: auto;
            transform: translateY(100%);
            transition: transform 0.3s ease;
            box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.15);
        }

        .post-form-container.show .post-form {
            transform: translateY(0);
        }

        .post-form-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid #eee;
        }

        .post-form-title {
            margin: 0;
            font-size: 1.2rem;
        }

        .post-form-close {
            font-size: 1.2rem;
            color: #666;
            cursor: pointer;
        }

        .post-form input,
        .post-form textarea {
            width: 100%;
            padding: 12px 15px;
            margin-bottom: 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
            box-sizing: border-box;
        }

        .post-form textarea {
            min-height: 120px;
            resize: vertical;
        }

        .post-form button {
            width: 100%;
            padding: 12px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
        }

        /* Comments Modal Styles */
        .comments-list {
            max-height: 300px;
            overflow-y: auto;
            margin-bottom: 15px;
        }

        .comment-form {
            display: flex;
            gap: 10px;
            padding: 15px 0;
            border-top: 1px solid #eee;
        }

        .comment-form textarea {
            flex: 1;
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 20px;
            font-size: 14px;
            resize: none;
            min-height: 40px;
        }

        .comment-form button {
            padding: 20px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 20px;
            font-weight: 500;
            cursor: pointer;
        }

        /* Menu Options (Profile Menu, Notification Settings) */
        .post-menu-options {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            background: white;
            border-radius: 20px 20px 0 0;
            padding: 20px;
            box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.15);
            transform: translateY(100%);
            transition: transform 0.3s ease;
            z-index: 1001;
            display: none;
        }

        .post-menu-options.show {
            transform: translateY(0);
            display: block;
        }

        .post-menu-options button {
            display: flex;
            align-items: center;
            gap: 10px;
            width: 100%;
            padding: 15px;
            border: none;
            background: none;
            text-align: left;
            font-size: 16px;
            cursor: pointer;
            border-radius: 8px;
        }

        .post-menu-options button:hover {
            background-color: #f5f5f5;
        }

        .post-menu-options button i {
            width: 20px;
            text-align: center;
        }

        .post-menu-options button.delete {
            color: var(--warning-color);
        }

        /* Legal Document Modal */
        .legal-buttons {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .legal-buttons button {
            flex: 1;
            min-width: 120px;
            padding: 12px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            cursor: pointer;
        }

        /* Color Options */
        .color-options {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
            flex-wrap: wrap;
        }

        .color-option {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid transparent;
            position: relative;
        }

        .color-option.selected {
            border-color: #333;
        }

        .color-option.selected::after {
            content: '✓';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-weight: bold;
            text-shadow: 0 0 2px rgba(0, 0, 0, 0.5);
        }

        .color-option[data-color="default"] {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
        }

        .color-option[data-color="blue"] {
            background-color: #d0ebff;
        }

        .color-option[data-color="green"] {
            background-color: #d3f9d8;
        }

        .color-option[data-color="purple"] {
            background-color: #e5dbff;
        }

        .color-option[data-color="red"] {
            background-color: #ffe3e3;
        }

        .color-option[data-color="orange"] {
            background-color: #ffe8cc;
        }

        /* Loading Overlay */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 2000;
        }

        .loading-content {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
            text-align: center;
        }

        .loading-spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 15px;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        /* Dark Mode Support */
        .dark-mode .auth-modal input,
        .dark-mode .post-form input,
        .dark-mode .post-form textarea,
        .dark-mode .comment-form textarea {
            background-color: var(--dark-bg-secondary);
            border-color: var(--dark-border);
            color: var(--dark-text);
        }

        .dark-mode .auth-modal .auth-tabs,
        .dark-mode .custom-modal-header,
        .dark-mode .custom-modal-footer,
        .dark-mode .edit-post-header,
        .dark-mode .edit-post-footer,
        .dark-mode .post-form-header {
            border-color: var(--dark-border);
        }

        .dark-mode .post-menu-options button:hover {
            background-color: var(--dark-bg-secondary);
        }

        .dark-mode .loading-content {
            background: var(--dark-bg-secondary);
            color: var(--dark-text);
        }

        /* Responsive Design */
        @media (min-width: 768px) {

            .bottom-sheet .auth-container,
            .bottom-sheet .custom-modal-content,
            .bottom-sheet .edit-post-content,
            .bottom-sheet .post-form {
                width: 90%;
                max-width: 500px;
                border-radius: 10px;
                margin-bottom: 20px;
            }

            .post-menu-options {
                width: auto;
                min-width: 200px;
                border-radius: 10px;
                bottom: auto;
                top: 60px;
                right: 20px;
                left: auto;
                transform: translateY(-20px);
                opacity: 0;
                transition: transform 0.3s ease, opacity 0.3s ease;
            }

            .post-menu-options.show {
                transform: translateY(0);
                opacity: 1;
            }
        }

        /* Scrollbar Styling for Webkit Browsers */
        .bottom-sheet ::-webkit-scrollbar {
            width: 6px;
        }

        .bottom-sheet ::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 3px;
        }

        .bottom-sheet ::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 3px;
        }

        .bottom-sheet ::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }

        .dark-mode .bottom-sheet ::-webkit-scrollbar-track {
            background: #2a2a2a;
        }

        .dark-mode .bottom-sheet ::-webkit-scrollbar-thumb {
            background: #555;
        }

        .dark-mode .bottom-sheet ::-webkit-scrollbar-thumb:hover {
            background: #777;
        }
/* CSS for the new changes */

/* Avatar Picker Styles */
.avatar-picker-content {
    padding: 20px;
}

.avatar-options h3 {
    margin: 15px 0 10px;
    color: var(--text-color);
    font-size: 1rem;
}

.emoji-grid {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    gap: 10px;
    margin-bottom: 20px;
}

.emoji-option {
    font-size: 2rem;
    text-align: center;
    padding: 10px;
    border-radius: 50%;
    cursor: pointer;
    transition: transform 0.2s, background-color 0.2s;
}

.emoji-option:hover {
    background-color: var(--light-bg);
    transform: scale(1.1);
}

#avatarText {
    width: 100%;
    padding: 12px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    margin-bottom: 15px;
    font-size: 1rem;
}

.text-preview {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background-color: var(--primary-color);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem;
    font-weight: bold;
    margin: 0 auto 20px;
}

.avatar-picker-footer {
    margin-top: 20px;
    text-align: center;
}

.avatar-picker-footer button {
    background-color: var(--primary-color);
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 8px;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 500;
}

.avatar-picker-footer button:hover {
    background-color: var(--primary-dark);
}

/* Profile View Modal Styles */
.profile-view-modal {
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: flex-end;
    justify-content: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s, visibility 0.3s;
}

.profile-view-modal.show {
    opacity: 1;
    visibility: visible;
}

.profile-view-content {
    background-color: var(--bg-color);
    width: 100%;
    height: 100%;
    border-top-left-radius: 20px;
    border-top-right-radius: 20px;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    transform: translateY(100%);
    transition: transform 0.3s ease-out;
}

.profile-view-modal.show .profile-view-content {
    transform: translateY(0);
}

.profile-view-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 16px;
    border-bottom: 1px solid var(--border-color);
    background-color: var(--bg-color);
}

.profile-view-header i {
    font-size: 1.2rem;
    cursor: pointer;
    color: var(--text-color);
}

.profile-view-header h3 {
    margin: 0;
    color: var(--text-color);
    font-size: 1.1rem;
}

.profile-view-body {
    flex: 1;
    overflow-y: auto;
    padding: 20px;
}

.profile-view-info {
    text-align: center;
    margin-bottom: 30px;
}

.profile-view-avatar {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 15px;
    color: white;
    font-weight: bold;
}

.profile-view-info h2 {
    margin: 0 0 5px;
    color: var(--text-color);
    font-size: 1.5rem;
}

.profile-view-info p {
    margin: 0 0 15px;
    color: var(--text-muted);
}

.profile-view-bio {
    color: var(--text-color);
    margin-bottom: 20px;
    line-height: 1.5;
}

.profile-view-stats {
    display: flex;
    justify-content: center;
    gap: 30px;
    margin-bottom: 20px;
}

.profile-view-stat {
    text-align: center;
}

.profile-view-stat span:first-child {
    display: block;
    font-weight: bold;
    font-size: 1.2rem;
    color: var(--text-color);
}

.profile-view-stat span:last-child {
    color: var(--text-muted);
    font-size: 0.9rem;
}

.profile-view-actions {
    display: flex;
    gap: 10px;
    justify-content: center;
}

.profile-view-posts {
    margin-top: 30px;
}

.profile-view-posts h3 {
    margin-bottom: 15px;
    color: var(--text-color);
    font-size: 1.2rem;
}

/* Sensitive Content Warning */
.sensitive-content-warning {
    background-color: var(--light-bg);
    border-radius: 12px;
    padding: 20px;
    text-align: center;
    margin-bottom: 15px;
}

.sensitive-content-warning i {
    font-size: 2rem;
    color: var(--warning-color);
    margin-bottom: 10px;
}

.sensitive-content-warning h4 {
    margin: 0 0 10px;
    color: var(--text-color);
}

.sensitive-content-warning p {
    margin: 0 0 15px;
    color: var(--text-muted);
}

.sensitive-content-warning button {
    background-color: var(--primary-color);
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 500;
}

.sensitive-content-warning button:hover {
    background-color: var(--primary-dark);
}

.post-description.sensitive {
    background-color: var(--light-bg);
    padding: 15px;
    border-radius: 8px;
}

/* Comment Reply Styles */
.comment-reply {
    display: flex;
    align-items: center;
    gap: 5px;
    cursor: pointer;
    color: var(--text-muted);
    font-size: 0.9rem;
}

.comment-reply:hover {
    color: var(--primary-color);
}

.comment-reply-form {
    margin-top: 10px;
    padding: 10px;
    background-color: var(--light-bg);
    border-radius: 8px;
}

.comment-reply-form textarea {
    width: 100%;
    padding: 10px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    resize: vertical;
    min-height: 60px;
    margin-bottom: 10px;
}

.comment-reply-form button {
    background-color: var(--primary-color);
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 8px;
    cursor: pointer;
    font-size: 0.9rem;
}

.comment-reply-form button:hover {
    background-color: var(--primary-dark);
}

/* User Avatar Styles in Posts */
.user-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: var(--primary-color);
    color: white;
    font-weight: bold;
    flex-shrink: 0;
}

.user-item-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: var(--primary-color);
    color: white;
    font-weight: bold;
    flex-shrink: 0;
}

.notification-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: var(--primary-color);
    color: white;
    font-weight: bold;
    flex-shrink: 0;
}

/* Dark Mode Support */
.dark-mode .avatar-picker-content {
    background-color: var(--dark-bg);
}

.dark-mode .emoji-option:hover {
    background-color: var(--dark-light-bg);
}

.dark-mode .profile-view-content {
    background-color: var(--dark-bg);
}

.dark-mode .profile-view-header {
    background-color: var(--dark-bg);
    border-bottom-color: var(--dark-border);
}

.dark-mode .sensitive-content-warning {
    background-color: var(--dark-light-bg);
}

.dark-mode .comment-reply-form {
    background-color: var(--dark-light-bg);
}

/* Responsive Design */
@media (max-width: 768px) {
    .emoji-grid {
        grid-template-columns: repeat(4, 1fr);
    }
    
    .profile-view-stats {
        gap: 20px;
    }
    
    .profile-view-actions {
        flex-direction: column;
        align-items: center;
    }
    
    .profile-view-actions .follow-btn {
        width: 100%;
        max-width: 200px;
    }
}

@media (max-width: 480px) {
    .emoji-grid {
        grid-template-columns: repeat(3, 1fr);
    }
    
    .profile-view-avatar {
        width: 80px;
        height: 80px;
    }
    
    .profile-view-stats {
        gap: 15px;
    }
    
    .profile-view-stat span:first-child {
        font-size: 1.1rem;
    }
}

/* Animation for modal appearance */
@keyframes slideUp {
    from {
        transform: translateY(100%);
    }
    to {
        transform: translateY(0);
    }
}

.profile-view-content {
    animation: slideUp 0.3s ease-out;
}

/* Custom scrollbar for profile view */
.profile-view-body::-webkit-scrollbar {
    width: 6px;
}

.profile-view-body::-webkit-scrollbar-track {
    background: transparent;
}

.profile-view-body::-webkit-scrollbar-thumb {
    background: var(--scrollbar-thumb);
    border-radius: 3px;
}

.dark-mode .profile-view-body::-webkit-scrollbar-thumb {
    background: var(--dark-scrollbar-thumb);
}
    </style>
</head>

<body>
    <div id="app-section">
        <!-- Auth Modal (Bottom Sheet) -->
        <div id="authModal" class="auth-modal bottom-sheet">
            <div class="auth-container">
                <div class="auth-tabs">
                    <div class="auth-tab active" onclick="switchAuthTab('login')">Sign In</div>
                    <div class="auth-tab" onclick="switchAuthTab('register')">Sign Up</div>
                    <i class="fas fa-times" onclick="hideAuthModal()"></i>
                </div>

                <form id="loginForm" class="auth-form" onsubmit="loginUser(event)">
                    <input type="email" id="loginEmail" placeholder="Email" required>
                    <input type="password" id="loginPassword" placeholder="Password" required>
                    <button type="submit">Sign In</button>
                    <div class="auth-footer">
                        <a onclick="showForgotPassword()">Forgot password?</a>
                    </div>
                </form>

                <form id="registerForm" class="auth-form" style="display: none;" onsubmit="registerUser(event)">
                    <input type="text" id="registerName" placeholder="Full Name" required>
                    <input type="email" id="registerEmail" placeholder="Email" required>
                    <input type="password" id="registerPassword" placeholder="Password" required>
                    <button type="submit">Sign Up</button>
                </form>
            </div>
        </div>

        <!-- Forgot Password Modal (Bottom Sheet) -->
        <div id="forgotPasswordModal" class="auth-modal bottom-sheet">
            <div class="auth-container">
                <div class="auth-tabs">
                    <div class="auth-tab active">Reset Password</div>
                    <i class="fas fa-times" onclick="hideForgotPassword()"></i>
                </div>
                <form id="forgotPasswordForm" class="auth-form" onsubmit="resetPassword(event)">
                    <input type="email" id="resetEmail" placeholder="Email" required>
                    <button type="submit">Send Reset Link</button>
                    <div class="auth-footer">
                        <a onclick="hideForgotPassword()">Back to Sign In</a>
                    </div>
                </form>
            </div>
        </div>

        <!-- Custom Modal (Bottom Sheet) -->
        <div id="customModal" class="custom-modal bottom-sheet">
            <div class="custom-modal-content">
                <div class="custom-modal-header">
                    <h3 id="modalTitle">Alert</h3>
                    <span class="close-modal" onclick="hideCustomModal()">&times;</span>
                </div>
                <div class="custom-modal-body" id="modalMessage"></div>
                <div class="custom-modal-footer">
                    <button onclick="hideCustomModal()">OK</button>
                </div>
            </div>
        </div>

        <!-- Edit Post Modal (Bottom Sheet) -->
        <div id="editPostModal" class="edit-post-modal bottom-sheet">
            <div class="edit-post-content">
                <div class="edit-post-header">
                    <h3>Edit Post</h3>
                    <span class="close-modal" onclick="hideEditPostModal()">&times;</span>
                </div>
                <div class="edit-post-body">
                    <form id="editPostForm">
                        <input type="hidden" id="editPostId">
                        <div class="color-options">
                            <div class="color-option selected" data-color="default" onclick="selectEditPostColor(this)" title="Default"></div>
                            <div class="color-option" data-color="blue" onclick="selectEditPostColor(this)" title="Blue"></div>
                            <div class="color-option" data-color="green" onclick="selectEditPostColor(this)" title="Green"></div>
                            <div class="color-option" data-color="purple" onclick="selectEditPostColor(this)" title="Purple"></div>
                            <div class="color-option" data-color="red" onclick="selectEditPostColor(this)" title="Red"></div>
                            <div class="color-option" data-color="orange" onclick="selectEditPostColor(this)" title="Orange"></div>
                        </div>
                        <input type="text" id="editPostTitle" placeholder="Title (optional)">
                        <textarea id="editPostDescription" placeholder="What's on your mind?" required></textarea>
                        <input type="text" id="editPostAuthor" placeholder="Source/Author (optional)">
                    </form>
                </div>
                <div class="edit-post-footer">
                    <button onclick="hideEditPostModal()">Cancel</button>
                    <button onclick="saveEditedPost()" style="background-color: var(--primary-color); color: white;">Save Changes</button>
                </div>
            </div>
        </div>

        <!-- Account Settings Modal (Bottom Sheet) -->
        <div id="accountSettingsModal" class="auth-modal bottom-sheet">
            <div class="auth-container">
                <div class="auth-tabs">
                    <div class="auth-tab active">Account Settings</div>
                    <i class="fas fa-times" onclick="hideAccountSettings()"></i>
                </div>
                <div class="auth-form">
                    <h3>Change Password</h3>
                    <input type="password" id="currentPassword" placeholder="Current Password" required>
                    <input type="password" id="newPassword" placeholder="New Password" required>
                    <input type="password" id="confirmPassword" placeholder="Confirm New Password" required>
                    <button onclick="changePassword()">Update Password</button>

                    <h3 style="margin-top: 20px;">Change Email</h3>
                    <input type="email" id="newEmail" placeholder="New Email" required>
                    <input type="password" id="emailPassword" placeholder="Current Password" required>
                    <button onclick="changeEmail()">Update Email</button>

                    <h3 style="margin-top: 20px; color: var(--warning-color);">Danger Zone</h3>
                    <button onclick="showDeleteAccountConfirm()" style="background-color: var(--warning-color);">Delete Account</button>
                </div>
            </div>
        </div>

        <!-- Delete Account Confirmation (Bottom Sheet) -->
        <div id="deleteAccountModal" class="auth-modal bottom-sheet">
            <div class="auth-container">
                <div class="auth-tabs">
                    <div class="auth-tab active" style="color: var(--warning-color);">Delete Account</div>
                    <i class="fas fa-times" onclick="hideDeleteAccountModal()"></i>
                </div>
                <div class="auth-form">
                    <p>This action cannot be undone. All your data will be permanently deleted.</p>
                    <input type="password" id="deleteAccountPassword" placeholder="Enter your password to confirm" required>
                    <div class="auth-footer" style="flex-direction: column;">
                        <button onclick="deleteAccount()" style="background-color: var(--warning-color);">Permanently Delete My Account</button>
                        <a onclick="hideDeleteAccountModal()">Cancel</a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Avatar Picker Modal (Bottom Sheet) -->
        <div id="avatarPickerModal" class="auth-modal bottom-sheet">
            <div class="auth-container">
                <div class="auth-tabs">
                    <div class="auth-tab active">Choose Avatar</div>
                    <i class="fas fa-times" onclick="hideAvatarPicker()"></i>
                </div>
                <div class="avatar-picker-content">
                    <div class="avatar-options">
                        <h3>Emoji Avatars</h3>
                        <div class="emoji-grid">
                            <span class="emoji-option" onclick="selectEmoji('😊')">😊</span>
                            <span class="emoji-option" onclick="selectEmoji('😂')">😂</span>
                            <span class="emoji-option" onclick="selectEmoji('🤔')">🤔</span>
                            <span class="emoji-option" onclick="selectEmoji('😎')">😎</span>
                            <span class="emoji-option" onclick="selectEmoji('🥰')">🥰</span>
                            <span class="emoji-option" onclick="selectEmoji('😍')">😍</span>
                            <span class="emoji-option" onclick="selectEmoji('🤩')">🤩</span>
                            <span class="emoji-option" onclick="selectEmoji('🙂')">🙂</span>
                            <span class="emoji-option" onclick="selectEmoji('😋')">😋</span>
                            <span class="emoji-option" onclick="selectEmoji('😇')">😇</span>
                        </div>
                        
                        <h3>Or Use Text (2 characters max)</h3>
                        <input type="text" id="avatarText" placeholder="Enter text (e.g. JD)" maxlength="2" oninput="updateTextPreview()">
                        <div id="textPreview" class="text-preview">JD</div>
                    </div>
                    <div class="avatar-picker-footer">
                        <button onclick="saveAvatarSelection()">Save Avatar</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Profile View Modal (Full Bottom Sheet) -->
        <div id="profileViewModal" class="profile-view-modal bottom-sheet">
            <div class="profile-view-content">
                <div class="profile-view-header">
                    <i class="fas fa-arrow-left" onclick="hideProfileView()"></i>
                    <h3 id="profileViewName">Profile</h3>
                    <i class="fas fa-share-alt" onclick="shareProfile()"></i>
                </div>
                <div class="profile-view-body" id="profileViewBody">
                    <!-- Profile content will be loaded here -->
                </div>
            </div>
        </div>

        <!-- Sidebar -->
        <aside id="sidebar">
            <div class="sidebar-header">
                <h2>Menu</h2>
                <i class="fas fa-times" onclick="toggleSidebar()"></i>
            </div>
            <ul class="sidebar-menu">
                <li onclick="showSection('home')"><i class="fas fa-home"></i> Home</li>
                <li onclick="showSection('explore')"><i class="fas fa-compass"></i> Explore</li>
                <li onclick="showSection('notifications')"><i class="fas fa-bell"></i> Notifications</li>
                <li onclick="showSection('find-users')"><i class="fas fa-users"></i> Find Users</li>
                <li onclick="showSection('profile')"><i class="fas fa-user"></i> Profile</li>
                <li onclick="showSection('settings')"><i class="fas fa-cog"></i> Settings</li>
                <li onclick="signOut()"><i class="fas fa-sign-out-alt"></i> Sign Out</li>
            </ul>
        </aside>

        <!-- Header -->
        <header id="header">
            <div class="logo">Notiqo</div>
            <div class="nav-icons">
                <i class="fas fa-users" onclick="showSection('find-users')"></i>
                <i class="fas fa-bell" onclick="showSection('notifications')">
                    <span id="notificationBadge" class="notification-badge"></span>
                </i>
                <i class="fas fa-bars nav-icon" onclick="toggleSidebar()"></i>
            </div>
        </header>

        <!-- Main Content Area -->
        <main id="main-content">
            <!-- Home section -->
            <section id="home" class="active-section">
                <div id="publishedContent">
                    <!-- Content will be loaded here -->
                </div>
            </section>

            <!-- Explore section -->
            <section id="explore">
                <div class="section-header">
                    <i class="fas fa-chevron-left section-back" onclick="showSection('home')"></i>
                    <h2 class="section-title">Explore</h2>
                    <div></div>
                </div>

                <div id="search-area" class="search-area">
                    <input type="text" id="searchQuery" placeholder="Search users or content..." oninput="debounceSearch()">
                    <button onclick="searchContent()"><i class="fas fa-search"></i></button>
                </div>

                <div id="searchResults" class="search-results">
                    <div class="empty-state">
                        <i class="fas fa-search"></i>
                        <h3>Search</h3>
                        <p>Enter a text to find what you're looking for</p>
                    </div>
                </div>

                <h3 style="margin-top: 2rem;">Suggested For You</h3>
                <div id="suggestedContent" class="content-container">
                    <!-- Suggested content will be loaded here -->
                </div>

                <h3 style="margin-top: 2rem;">Suggested Users</h3>
                <div id="suggestedUsers" class="user-list">
                    <!-- Suggested users will be loaded here -->
                </div>
            </section>

            <!-- Notifications section -->
            <section id="notifications">
                <div class="section-header">
                    <i class="fas fa-chevron-left section-back" onclick="showSection('home')"></i>
                    <h2 class="section-title">Notifications</h2>
                    <i class="fas fa-ellipsis-v" onclick="showNotificationSettings()"></i>
                </div>

                <div id="notificationsList">
                    <!-- Notifications will be loaded here -->
                </div>
            </section>

            <!-- Find Users section -->
            <section id="find-users">
                <div class="section-header">
                    <i class="fas fa-chevron-left section-back" onclick="showSection('home')"></i>
                    <h2 class="section-title">Find Users</h2>
                    <div></div>
                </div>

                <div class="profile-actions">
                    <button class="follow-btn" onclick="showFindTab('find')">Find Users</button>
                    <button class="follow-btn" onclick="showFindTab('followers')">Followers</button>
                    <button class="follow-btn" onclick="showFindTab('following')">Following</button>
                </div>

                <div id="findUsersTab" class="user-list">
                    <!-- Users will be loaded here -->
                </div>

                <div id="followersTab" class="user-list" style="display: none;">
                    <!-- Followers will be loaded here -->
                </div>

                <div id="followingTab" class="user-list" style="display: none;">
                    <!-- Following will be loaded here -->
                </div>
            </section>

            <!-- Profile section -->
            <section id="profile">
                <div id="profile-info">
                    <div class="section-header">
                        <i class="fas fa-chevron-left section-back" onclick="showSection('home')"></i>
                        <h2 class="section-title">Profile</h2>
                        <i class="fas fa-ellipsis-v" onclick="showProfileMenu()"></i>
                    </div>

                    <div class="profile-header">
                        <div class="profile-picture-container">
                            <div class="user-avatar profile" id="profileAvatar" onclick="showAvatarPicker()">
                                <span id="profileAvatarContent">U</span>
                            </div>
                        </div>
                        <div class="user-details">
                            <h2 id="profileName">User Name</h2>
                            <p id="profileUsername">@username</p>
                            <div class="user-bio" id="profileBio">This is a bio. Max 110 characters.</div>

                            <div class="profile-stats">
                                <div class="profile-stat" onclick="showFindTab('followers')">
                                    <span id="profileFollowersCount">0</span> followers
                                </div>
                                <div class="profile-stat" onclick="showFindTab('following')">
                                    <span id="profileFollowingCount">0</span> following
                                </div>
                            </div>

                            <div class="profile-actions">
                                <button class="follow-btn" id="followButton" onclick="toggleFollow()" disabled>Follow</button>
                                <button class="follow-btn" onclick="shareProfile()">
                                    <i class="fas fa-share"></i> Share
                                </button>
                            </div>
                        </div>
                    </div>

                    <div id="profilePosts" class="content-container">
                        <div class="empty-state">
                            <i class="fas fa-edit"></i>
                            <h3>No posts yet</h3>
                            <p>Create your first post to share with others</p>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Settings section -->
            <section id="settings" class="settings-container">
                <div class="section-header">
                    <i class="fas fa-chevron-left section-back" onclick="showSection('home')"></i>
                    <h2 class="section-title">Settings</h2>
                    <div></div>
                </div>

                <form id="settingsForm" class="settings-form">
                    <div class="settings-section">
                        <h2 class="settings-subtitle"><i class="fas fa-user"></i> Profile Settings</h2>
                        <label for="settingsName">Name:</label>
                        <input type="text" id="settingsName" placeholder="Your name">

                        <label for="settingsBio">Bio:</label>
                        <textarea id="settingsBio" placeholder="Tell others about yourself (max 110 chars)" maxlength="110"></textarea>
                        <button type="button" class="follow-btn" onclick="saveProfileSettings()">Save Profile</button>
                    </div>

                    <div class="settings-section">
                        <h2 class="settings-subtitle"><i class="fas fa-lock"></i> Account Security</h2>
                        <button type="button" class="follow-btn" onclick="showAccountSettings()">
                            Change Password or Email
                        </button>
                    </div>

                    <div class="settings-section">
                        <h2 class="settings-subtitle"><i class="fas fa-paint-brush"></i> Appearance</h2>
                        <label class="toggle-label">
                            <span class="toggle-text">Dark Mode</span>
                            <span class="toggle-switch">
                                <input type="checkbox" id="darkModeToggle" onchange="toggleDarkMode()">
                                <span class="toggle-slider"></span>
                            </span>
                        </label>
                    </div>

                    <div class="settings-section">
                        <h2 class="settings-subtitle"><i class="fas fa-bell"></i> Notifications</h2>
                        <label class="toggle-label">
                            <span class="toggle-text">New Followers</span>
                            <span class="toggle-switch">
                                <input type="checkbox" id="notifFollowersToggle" checked>
                                <span class="toggle-slider"></span>
                            </span>
                        </label>

                        <label class="toggle-label">
                            <span class="toggle-text">Likes & Comments</span>
                            <span class="toggle-switch">
                                <input type="checkbox" id="notifLikesToggle" checked>
                                <span class="toggle-slider"></span>
                            </span>
                        </label>

                        <label class="toggle-label">
                            <span class="toggle-text">Mentions</span>
                            <span class="toggle-switch">
                                <input type="checkbox" id="notifMentionsToggle" checked>
                                <span class="toggle-slider"></span>
                            </span>
                        </label>
                    </div>

                    <div class="settings-section">
                        <h2 class="settings-subtitle"><i class="fas fa-file-alt"></i> Legal</h2>
                        <div class="legal-buttons">
                            <button type="button" onclick="showLegalDocument('privacy')">Privacy Policy</button>
                            <button type="button" onclick="showLegalDocument('terms')">Terms of Service</button>
                        </div>
                    </div>

                    <div class="settings-section">
                        <h2 class="settings-subtitle"><i class="fas fa-shield-alt"></i> Account</h2>
                        <button type="button" class="follow-btn" onclick="signOut()">Sign Out</button>
                        <button type="button" class="follow-btn warning" onclick="showDeleteAccountConfirm()">Delete Account</button>
                    </div>
                </form>
            </section>
        </main>

        <!-- Post form modal (Bottom Sheet) -->
        <div id="postFormContainer" class="post-form-container bottom-sheet">
            <div class="post-form">
                <div class="post-form-header">
                    <h2 class="post-form-title">Create Post</h2>
                    <i class="fas fa-times post-form-close" onclick="togglePostFormContainer()"></i>
                </div>
                <form id="postForm" onsubmit="createPost(event)">
                    <div class="color-options">
                        <div class="color-option selected" data-color="default" onclick="selectPostColor(this)" title="Default"></div>
                        <div class="color-option" data-color="blue" onclick="selectPostColor(this)" title="Blue"></div>
                        <div class="color-option" data-color="green" onclick="selectPostColor(this)" title="Green"></div>
                        <div class="color-option" data-color="purple" onclick="selectPostColor(this)" title="Purple"></div>
                        <div class="color-option" data-color="red" onclick="selectPostColor(this)" title="Red"></div>
                        <div class="color-option" data-color="orange" onclick="selectPostColor(this)" title="Orange"></div>
                    </div>

                    <input type="text" id="postTitle" placeholder="Title (optional)">
                    <textarea id="postDescription" placeholder="What's on your mind?" required></textarea>
                    <input type="text" id="postAuthor" placeholder="Source/Author (optional)">
                    <button type="submit">Publish</button>
                </form>
            </div>
        </div>

        <!-- Comments Modal (Bottom Sheet) -->
        <div id="commentsModal" class="post-form-container bottom-sheet">
            <div class="post-form">
                <div class="post-form-header">
                    <h2 class="post-form-title">Comments</h2>
                    <i class="fas fa-times post-form-close" onclick="hideCommentsModal()"></i>
                </div>
                <div id="commentsList" class="comments-list"></div>
                <form id="commentForm" class="comment-form" onsubmit="addComment(event)">
                    <input type="hidden" id="commentPostId">
                    <textarea id="commentText" placeholder="Write a comment..." required></textarea>
                    <button style="width: 20%; height: 30%;" type="submit"><i class="fas fa-paper-plane"></i></button>
                </form>
            </div>
        </div>

        <!-- Bottom Navigation -->
        <div class="bottom-nav">
            <i class="fas fa-home" onclick="showSection('home')"></i>
            <i class="fas fa-compass" onclick="showSection('explore')"></i>
            <i id="toggle-button" class="fas fa-plus-circle" onclick="togglePostFormContainer()"></i>
            <i class="fas fa-bell" onclick="showSection('notifications')"></i>
            <i class="fas fa-user" onclick="showSection('profile')"></i>
        </div>

        <!-- Legal Document Modal (Bottom Sheet) -->
        <div id="legalModal" class="auth-modal bottom-sheet">
            <div class="auth-container">
                <div class="auth-tabs">
                    <div class="auth-tab active" id="legalDocTitle">Document</div>
                    <i class="fas fa-times" onclick="hideLegalDocument()"></i>
                </div>
                <div id="legalDocContent">
                    Loading document...
                </div>
            </div>
        </div>

        <!-- Profile Menu -->
        <div id="profileMenu" class="post-menu-options bottom-sheet">
            <button onclick="editProfile()"><i class="fas fa-edit"></i> Edit Profile</button>
            <button onclick="shareProfile()"><i class="fas fa-share"></i> Share Profile</button>
            <button onclick="showAccountSettings()"><i class="fas fa-lock"></i> Account Settings</button>
            <button onclick="showSection('settings')"><i class="fas fa-cog"></i> Settings</button>
        </div>

        <!-- Notification Settings Menu -->
        <div id="notificationSettingsMenu" class="post-menu-options bottom-sheet">
            <button onclick="markAllAsRead()"><i class="fas fa-check"></i> Mark All as Read</button>
            <button onclick="showSection('settings')"><i class="fas fa-cog"></i> Notification Settings</button>
        </div>
    </div>

    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-auth.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-firestore.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/toxicity"></script>

<script>
    const firebaseConfig = {
        apiKey: "AIzaSyC1GAr9Z825c8Qzzg2Rw11Tiy9b8zv17hw",
        authDomain: "eldrex1-2a54a.firebaseapp.com",
        projectId: "eldrex1-2a54a",
        storageBucket: "eldrex1-2a54a.firebasestorage.app",
        messagingSenderId: "814738381514",
        appId: "1:814738381514:web:12119e5bd49221e7e2f233",
        measurementId: "G-G4W63HMVCB"
    };

    // Initialize Firebase
    firebase.initializeApp(firebaseConfig);
    const auth = firebase.auth();
    const db = firebase.firestore();

    // Toxicity classifier
    let toxicityClassifier = null;

    // DOM Elements
    const authModal = document.getElementById('authModal');
    const forgotPasswordModal = document.getElementById('forgotPasswordModal');
    const customModal = document.getElementById('customModal');
    const editPostModal = document.getElementById('editPostModal');
    const accountSettingsModal = document.getElementById('accountSettingsModal');
    const deleteAccountModal = document.getElementById('deleteAccountModal');
    const avatarPickerModal = document.getElementById('avatarPickerModal');
    const profileViewModal = document.getElementById('profileViewModal');
    const loginForm = document.getElementById('loginForm');
    const registerForm = document.getElementById('registerForm');
    const sidebar = document.getElementById('sidebar');
    const postFormContainer = document.getElementById('postFormContainer');
    const commentsModal = document.getElementById('commentsModal');
    const publishedContent = document.getElementById('publishedContent');
    const profileAvatar = document.getElementById('profileAvatar');
    const profileAvatarContent = document.getElementById('profileAvatarContent');
    const profileName = document.getElementById('profileName');
    const profileUsername = document.getElementById('profileUsername');
    const profileBio = document.getElementById('profileBio');
    const followButton = document.getElementById('followButton');

    // Current user data
    let currentUser = null;
    let currentUserData = null;
    let posts = [];
    let selectedPostColor = 'default';
    let selectedEditPostColor = 'default';
    let viewingProfileUserId = null;
    let notificationCount = 0;
    let currentEditingPostId = null;
    let userInterests = {};
    let searchTimeout = null;
    let selectedAvatarType = 'text'; // 'text' or 'emoji'
    let selectedAvatarValue = 'U'; // Default initial

    // Initialize the app
    document.addEventListener('DOMContentLoaded', () => {
        // Load toxicity classifier
        loadToxicityClassifier();
        
        // Check auth state
        auth.onAuthStateChanged(user => {
            if (user) {
                currentUser = user;
                loadUserData(user.uid);
                showSection('home');
                hideAuthModal();
                loadPosts();
                loadNotifications();
                loadSuggestedUsers();

                // Check URL parameters
                checkUrlParameters();
            } else {
                showAuthModal();
                currentUser = null;
            }
        });

        // Check for dark mode preference
        if (localStorage.getItem('darkMode') === 'enabled') {
            document.body.classList.add('dark-mode');
            document.getElementById('darkModeToggle').checked = true;
        }
    });

    // Load TensorFlow.js toxicity classifier
    async function loadToxicityClassifier() {
        try {
            // The minimum prediction confidence (0-1)
            const threshold = 0.7;
            
            // Load the model with the specified threshold
            toxicityClassifier = await toxicity.load(threshold, [
                'identity_attack', 'insult', 'obscene', 'severe_toxicity', 
                'sexual_explicit', 'threat', 'toxicity'
            ]);
            
            console.log('Toxicity classifier loaded successfully');
        } catch (error) {
            console.error('Error loading toxicity classifier:', error);
        }
    }

    // Check content for sensitive material
    async function checkContentSensitivity(content) {
        if (!toxicityClassifier || !content) return false;
        
        try {
            const predictions = await toxicityClassifier.classify(content);
            
            // Check if any category is positive (sensitive content)
            for (const prediction of predictions) {
                if (prediction.results[0].match) {
                    return true;
                }
            }
            
            return false;
        } catch (error) {
            console.error('Error checking content sensitivity:', error);
            return false;
        }
    }

    // Check URL parameters for post or profile IDs
    function checkUrlParameters() {
        const urlParams = new URLSearchParams(window.location.search);
        const postId = urlParams.get('postid');
        const profileId = urlParams.get('profileid');

        if (postId) {
            // Load specific post
            loadSpecificPost(postId);
        } else if (profileId && profileId !== currentUser.uid) {
            // View specific profile
            viewUserProfile(profileId);
        }
    }

    // Modal control functions
    function showAuthModal() {
        authModal.classList.add('show');
        document.body.style.overflow = 'hidden';
    }

    function hideAuthModal() {
        authModal.classList.remove('show');
        document.body.style.overflow = 'auto';
    }

    function showCustomModal(title, message, isConfirm = false, confirmCallback = null) {
        document.getElementById('modalTitle').textContent = title;
        document.getElementById('modalMessage').textContent = message;

        const modalFooter = document.querySelector('.custom-modal-footer');
        modalFooter.innerHTML = '';

        if (isConfirm) {
            modalFooter.innerHTML = `
                <button onclick="hideCustomModal()">Cancel</button>
                <button onclick="handleConfirm()" style="background-color: var(--warning-color);">Confirm</button>
            `;

            window.handleConfirm = () => {
                hideCustomModal();
                if (confirmCallback) confirmCallback();
            };
        } else {
            modalFooter.innerHTML = '<button onclick="hideCustomModal()">OK</button>';
        }

        customModal.classList.add('show');
        document.body.style.overflow = 'hidden';
    }

    function hideCustomModal() {
        customModal.classList.remove('show');
        document.body.style.overflow = 'auto';
    }

    function showAccountSettings() {
        accountSettingsModal.classList.add('show');
        document.body.style.overflow = 'hidden';
        document.getElementById('profileMenu').style.display = 'none';
    }

    function hideAccountSettings() {
        accountSettingsModal.classList.remove('show');
        document.body.style.overflow = 'auto';
    }

    function showDeleteAccountConfirm() {
        deleteAccountModal.classList.add('show');
        document.body.style.overflow = 'hidden';
    }

    function hideDeleteAccountModal() {
        deleteAccountModal.classList.remove('show');
        document.body.style.overflow = 'auto';
    }

    function showForgotPassword() {
        authModal.classList.remove('show');
        forgotPasswordModal.classList.add('show');
    }

    function hideForgotPassword() {
        forgotPasswordModal.classList.remove('show');
        authModal.classList.add('show');
    }

    function showAvatarPicker() {
        if (!currentUser) {
            showCustomModal('Sign In Required', 'Please sign in to change your avatar');
            return;
        }
        
        avatarPickerModal.classList.add('show');
        document.body.style.overflow = 'hidden';
        
        // Set current avatar values
        if (currentUserData.avatarType === 'emoji') {
            selectedAvatarType = 'emoji';
            selectedAvatarValue = currentUserData.avatarValue || '😊';
            document.getElementById('avatarText').value = '';
        } else {
            selectedAvatarType = 'text';
            selectedAvatarValue = currentUserData.avatarValue || currentUserData.name.substring(0, 2).toUpperCase();
            document.getElementById('avatarText').value = selectedAvatarValue;
        }
        
        updateTextPreview();
    }

    function hideAvatarPicker() {
        avatarPickerModal.classList.remove('show');
        document.body.style.overflow = 'auto';
    }

    function selectEmoji(emoji) {
        selectedAvatarType = 'emoji';
        selectedAvatarValue = emoji;
        
        // Update preview
        document.getElementById('textPreview').textContent = emoji;
        document.getElementById('avatarText').value = '';
    }

    function updateTextPreview() {
        const text = document.getElementById('avatarText').value;
        if (text) {
            selectedAvatarType = 'text';
            selectedAvatarValue = text.substring(0, 2).toUpperCase();
            document.getElementById('textPreview').textContent = selectedAvatarValue;
        }
    }

    function saveAvatarSelection() {
        if (!currentUser) return;
        
        const loading = showLoading('Updating avatar...');
        
        db.collection('users').doc(currentUser.uid).update({
            avatarType: selectedAvatarType,
            avatarValue: selectedAvatarValue
        })
        .then(() => {
            // Update local data
            currentUserData.avatarType = selectedAvatarType;
            currentUserData.avatarValue = selectedAvatarValue;
            
            // Update UI
            updateProfileUI(currentUserData);
            
            hideLoading(loading);
            hideAvatarPicker();
            showCustomModal('Success', 'Avatar updated successfully!');
        })
        .catch(error => {
            hideLoading(loading);
            showCustomModal('Error', 'Failed to update avatar: ' + error.message);
        });
    }

    function showProfileView(userId) {
        profileViewModal.classList.add('show');
        document.body.style.overflow = 'hidden';
        
        // Load profile data
        loadProfileForView(userId);
    }

    function hideProfileView() {
        profileViewModal.classList.remove('show');
        document.body.style.overflow = 'auto';
    }

    function loadProfileForView(userId) {
        const loading = showLoading('Loading profile...');
        
        db.collection('users').doc(userId).get()
            .then(doc => {
                hideLoading(loading);
                
                if (doc.exists) {
                    const userData = doc.data();
                    
                    // Update profile view
                    document.getElementById('profileViewName').textContent = userData.name;
                    
                    const profileViewBody = document.getElementById('profileViewBody');
                    profileViewBody.innerHTML = `
                        <div class="profile-view-info">
                            <div class="profile-view-avatar" style="${userData.avatarType === 'emoji' ? 'font-size: 4rem;' : 'font-size: 2rem; background-color: #4ECDC4;'}">
                                ${userData.avatarValue || userData.name.charAt(0).toUpperCase()}
                            </div>
                            <h2>${userData.name}</h2>
                            <p>@${userData.username}</p>
                            <div class="profile-view-bio">${userData.bio || "No bio yet"}</div>
                            
                            <div class="profile-view-stats">
                                <div class="profile-view-stat">
                                    <span>${userData.followers ? userData.followers.length : 0}</span>
                                    <span>Followers</span>
                                </div>
                                <div class="profile-view-stat">
                                    <span>${userData.following ? userData.following.length : 0}</span>
                                    <span>Following</span>
                                </div>
                                <div class="profile-view-stat">
                                    <span>${userData.postCount || 0}</span>
                                    <span>Posts</span>
                                </div>
                            </div>
                            
                            ${userId !== currentUser.uid ? `
                            <div class="profile-view-actions">
                                <button class="follow-btn ${userData.followers && userData.followers.includes(currentUser.uid) ? 'following' : ''}" 
                                    onclick="toggleFollowView('${userId}')">
                                    ${userData.followers && userData.followers.includes(currentUser.uid) ? 'Following' : 'Follow'}
                                </button>
                                <button class="follow-btn" onclick="shareProfile('${userId}')">
                                    <i class="fas fa-share"></i> Share
                                </button>
                            </div>
                            ` : ''}
                        </div>
                        
                        <div class="profile-view-posts">
                            <h3>Posts</h3>
                            <div id="profileViewPosts" class="content-container">
                                <!-- Posts will be loaded here -->
                            </div>
                        </div>
                    `;
                    
                    // Load posts for this profile
                    loadProfileViewPosts(userId);
                }
            })
            .catch(error => {
                hideLoading(loading);
                showCustomModal('Error', 'Failed to load profile: ' + error.message);
            });
    }

    function loadProfileViewPosts(userId) {
        const postsContainer = document.getElementById('profileViewPosts');
        
        db.collection('posts')
            .where('userId', '==', userId)
            .orderBy('createdAt', 'desc')
            .limit(20)
            .get()
            .then(querySnapshot => {
                postsContainer.innerHTML = '';

                if (querySnapshot.empty) {
                    postsContainer.innerHTML = `
                        <div class="empty-state">
                            <i class="fas fa-edit"></i>
                            <h3>No posts yet</h3>
                            <p>This user hasn't posted anything yet</p>
                        </div>
                    `;
                    return;
                }

                querySnapshot.forEach(doc => {
                    const post = doc.data();
                    post.id = doc.id;
                    renderPost(post, postsContainer, true); // true indicates it's for profile view
                });
            })
            .catch(error => {
                showCustomModal('Error', 'Failed to load posts: ' + error.message);
            });
    }

    function toggleFollowView(userId) {
        if (!currentUser || userId === currentUser.uid) return;
        
        // Find the follow button in the profile view
        const followBtn = document.querySelector('.profile-view-actions .follow-btn');
        
        const isFollowing = followBtn.textContent === 'Following';
        
        if (isFollowing) {
            // Unfollow logic
            db.collection('users').doc(currentUser.uid).update({
                following: firebase.firestore.FieldValue.arrayRemove(userId)
            });

            db.collection('users').doc(userId).update({
                followers: firebase.firestore.FieldValue.arrayRemove(currentUser.uid)
            }).then(() => {
                followBtn.textContent = 'Follow';
                followBtn.classList.remove('following');
                
                // Update current user data
                if (currentUserData.following) {
                    currentUserData.following = currentUserData.following.filter(id => id !== userId);
                }
                
                // Update stats in profile view
                const stats = document.querySelectorAll('.profile-view-stat span');
                if (stats.length >= 2) {
                    const followerCount = parseInt(stats[0].textContent) - 1;
                    stats[0].textContent = followerCount;
                }
            });
        } else {
            // Follow logic
            db.collection('users').doc(currentUser.uid).update({
                following: firebase.firestore.FieldValue.arrayUnion(userId)
            });

            db.collection('users').doc(userId).update({
                followers: firebase.firestore.FieldValue.arrayUnion(currentUser.uid)
            }).then(() => {
                followBtn.textContent = 'Following';
                followBtn.classList.add('following');
                
                // Update current user data
                if (!currentUserData.following) {
                    currentUserData.following = [];
                }
                currentUserData.following.push(userId);
                
                // Update stats in profile view
                const stats = document.querySelectorAll('.profile-view-stat span');
                if (stats.length >= 2) {
                    const followerCount = parseInt(stats[0].textContent) + 1;
                    stats[0].textContent = followerCount;
                }
                
                // Send notification
                sendNotification(userId, 'follow', currentUser.uid);
            });
        }
    }

    // UI Functions
    function toggleSidebar() {
        sidebar.classList.toggle('show');
        document.body.style.overflow = sidebar.classList.contains('show') ? 'hidden' : 'auto';
    }

    function showSection(sectionId) {
        // Hide all sections
        document.querySelectorAll('section').forEach(section => {
            section.classList.remove('active-section');
        });

        // Show the selected section
        document.getElementById(sectionId).classList.add('active-section');

        // Close sidebar if open
        sidebar.classList.remove('show');

        // Close all modals
        closeAllModals();

        // Load data if needed
        if (sectionId === 'notifications') {
            loadNotifications();
        } else if (sectionId === 'find-users') {
            showFindTab('find');
        } else if (sectionId === 'profile') {
            if (!viewingProfileUserId) {
                viewingProfileUserId = currentUser?.uid;
            }
            loadProfilePosts();
        } else if (sectionId === 'explore') {
            loadSuggestedUsers();
            loadSuggestedContent();
        }

        document.body.style.overflow = 'auto';
    }

    function closeAllModals() {
        document.querySelectorAll('.bottom-sheet').forEach(modal => {
            modal.classList.remove('show');
        });
        document.body.style.overflow = 'auto';
    }

    function togglePostFormContainer() {
        if (!currentUser) {
            showCustomModal('Sign In Required', 'Please sign in to create a post');
            return;
        }

        postFormContainer.classList.toggle('show');
        document.body.style.overflow = postFormContainer.classList.contains('show') ? 'hidden' : 'auto';

        if (!postFormContainer.classList.contains('show')) {
            // Reset form when closing
            document.getElementById('postForm').reset();
            selectedPostColor = 'default';
            document.querySelector('.color-option[data-color="default"]').classList.add('selected');
        }
    }

    function showCommentsModal(postId) {
        if (!currentUser) {
            showCustomModal('Sign In Required', 'Please sign in to view comments');
            return;
        }

        document.getElementById('commentPostId').value = postId;
        commentsModal.classList.add('show');
        document.body.style.overflow = 'hidden';
        loadComments(postId);
    }

    function hideCommentsModal() {
        commentsModal.classList.remove('show');
        document.body.style.overflow = 'auto';
    }

    function selectPostColor(element) {
        document.querySelectorAll('.color-option').forEach(opt => {
            opt.classList.remove('selected');
        });
        element.classList.add('selected');
        selectedPostColor = element.getAttribute('data-color');
    }

    function selectEditPostColor(element) {
        document.querySelectorAll('.edit-post-content .color-option').forEach(opt => {
            opt.classList.remove('selected');
        });
        element.classList.add('selected');
        selectedEditPostColor = element.getAttribute('data-color');
    }

    // Auth functions
    function switchAuthTab(tab) {
        if (tab === 'login') {
            document.querySelector('.auth-tab.active').classList.remove('active');
            document.querySelectorAll('.auth-tab')[0].classList.add('active');
            loginForm.style.display = 'flex';
            registerForm.style.display = 'none';
        } else {
            document.querySelector('.auth-tab.active').classList.remove('active');
            document.querySelectorAll('.auth-tab')[1].classList.add('active');
            loginForm.style.display = 'none';
            registerForm.style.display = 'flex';
        }
    }

    function loginUser(e) {
        e.preventDefault();
        const email = document.getElementById('loginEmail').value;
        const password = document.getElementById('loginPassword').value;

        const loginBtn = e.target.querySelector('button');
        const originalText = loginBtn.innerHTML;
        loginBtn.innerHTML = '<div class="loading"></div>';
        loginBtn.disabled = true;

        auth.signInWithEmailAndPassword(email, password)
            .then(() => {
                loginBtn.innerHTML = originalText;
                loginBtn.disabled = false;
            })
            .catch(error => {
                loginBtn.innerHTML = originalText;
                loginBtn.disabled = false;
                showCustomModal('Login Error', getFriendlyAuthError(error));
            });
    }

    function resetPassword(e) {
        e.preventDefault();
        const email = document.getElementById('resetEmail').value;

        const resetBtn = e.target.querySelector('button');
        const originalText = resetBtn.innerHTML;
        resetBtn.innerHTML = '<div class="loading"></div>';
        resetBtn.disabled = true;

        auth.sendPasswordResetEmail(email)
            .then(() => {
                resetBtn.innerHTML = originalText;
                resetBtn.disabled = false;
                showCustomModal('Email Sent', 'Password reset email sent! Check your inbox.');
                hideForgotPassword();
            })
            .catch(error => {
                resetBtn.innerHTML = originalText;
                resetBtn.disabled = false;
                showCustomModal('Error', getFriendlyAuthError(error));
            });
    }

    function registerUser(e) {
        e.preventDefault();
        const name = document.getElementById('registerName').value;
        const email = document.getElementById('registerEmail').value;
        const password = document.getElementById('registerPassword').value;

        // Auto-generate username
        const username = generateUsername(name);

        const registerBtn = e.target.querySelector('button');
        const originalText = registerBtn.innerHTML;
        registerBtn.innerHTML = '<div class="loading"></div>';
        registerBtn.disabled = true;

        auth.createUserWithEmailAndPassword(email, password)
            .then((userCredential) => {
                // Set default avatar (text with first letter)
                const avatarValue = name.substring(0, 2).toUpperCase();

                // Save additional user data to Firestore
                return db.collection('users').doc(userCredential.user.uid).set({
                    name,
                    username,
                    email,
                    bio: "",
                    avatarType: 'text',
                    avatarValue,
                    joined: firebase.firestore.FieldValue.serverTimestamp(),
                    followers: [],
                    following: [],
                    postCount: 0,
                    notificationsEnabled: {
                        followers: true,
                        likes: true,
                        mentions: true
                    }
                });
            })
            .then(() => {
                registerBtn.innerHTML = originalText;
                registerBtn.disabled = false;
            })
            .catch(error => {
                registerBtn.innerHTML = originalText;
                registerBtn.disabled = false;
                showCustomModal('Registration Error', getFriendlyAuthError(error));
            });
    }

    function generateUsername(name) {
        const cleanName = name.replace(/\s+/g, '').toLowerCase();
        const randomNum = Math.floor(Math.random() * 1000);
        return `${cleanName}${randomNum}`;
    }

    function signOut() {
        const loading = showLoading('Signing out...');
        auth.signOut().then(() => {
            hideLoading(loading);
            currentUser = null;
            showAuthModal();
        }).catch(error => {
            hideLoading(loading);
            showCustomModal('Error', 'Failed to sign out: ' + error.message);
        });
    }

    // Account management functions
    function changePassword() {
        const currentPassword = document.getElementById('currentPassword').value;
        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;

        if (!currentPassword || !newPassword || !confirmPassword) {
            showCustomModal('Error', 'Please fill in all password fields');
            return;
        }

        if (newPassword !== confirmPassword) {
            showCustomModal('Error', 'New passwords do not match');
            return;
        }

        if (newPassword.length < 6) {
            showCustomModal('Error', 'Password must be at least 6 characters long');
            return;
        }

        const loading = showLoading('Changing password...');

        // Reauthenticate user first
        const credential = firebase.auth.EmailAuthProvider.credential(
            currentUser.email,
            currentPassword
        );

        currentUser.reauthenticateWithCredential(credential)
            .then(() => {
                // Change password
                return currentUser.updatePassword(newPassword);
            })
            .then(() => {
                hideLoading(loading);
                hideAccountSettings();
                showCustomModal('Success', 'Password changed successfully!');
                // Clear password fields
                document.getElementById('currentPassword').value = '';
                document.getElementById('newPassword').value = '';
                document.getElementById('confirmPassword').value = '';
            })
            .catch(error => {
                hideLoading(loading);
                showCustomModal('Error', getFriendlyAuthError(error));
            });
    }

    function changeEmail() {
        const newEmail = document.getElementById('newEmail').value;
        const password = document.getElementById('emailPassword').value;

        if (!newEmail || !password) {
            showCustomModal('Error', 'Please fill in all fields');
            return;
        }

        // Fixed the regular expression error here
        if (!validateEmail(newEmail)) {
            showCustomModal('Error', 'Please enter a valid email address');
            return;
        }

        const loading = showLoading('Changing email...');

        // Reauthenticate user first
        const credential = firebase.auth.EmailAuthProvider.credential(
            currentUser.email,
            password
        );

        currentUser.reauthenticateWithCredential(credential)
            .then(() => {
                // Change email
                return currentUser.updateEmail(newEmail);
            })
            .then(() => {
                // Update email in Firestore
                return db.collection('users').doc(currentUser.uid).update({
                    email: newEmail
                });
            })
            .then(() => {
                hideLoading(loading);
                hideAccountSettings();
                showCustomModal('Success', 'Email changed successfully!');
                // Clear email fields
                document.getElementById('newEmail').value = '';
                document.getElementById('emailPassword').value = '';
            })
            .catch(error => {
                hideLoading(loading);
                showCustomModal('Error', getFriendlyAuthError(error));
            });
    }

    function deleteAccount() {
        const password = document.getElementById('deleteAccountPassword').value;

        if (!password) {
            showCustomModal('Error', 'Please enter your password to confirm');
            return;
        }

        const loading = showLoading('Deleting account...');

        // Reauthenticate user first
        const credential = firebase.auth.EmailAuthProvider.credential(
            currentUser.email,
            password
        );

        currentUser.reauthenticateWithCredential(credential)
            .then(() => {
                // Delete user data from Firestore first
                return deleteUserData(currentUser.uid);
            })
            .then(() => {
                // Delete the auth account
                return currentUser.delete();
            })
            .then(() => {
                hideLoading(loading);
                hideDeleteAccountModal();
                showCustomModal('Account Deleted', 'Your account has been permanently deleted.');
                currentUser = null;
                showAuthModal();
            })
            .catch(error => {
                hideLoading(loading);
                showCustomModal('Error', getFriendlyAuthError(error));
            });
    }

    async function deleteUserData(userId) {
        try {
            // Delete user's posts
            const postsSnapshot = await db.collection('posts')
                .where('userId', '==', userId)
                .get();

            const postDeletes = postsSnapshot.docs.map(doc => doc.ref.delete());
            await Promise.all(postDeletes);

            // Delete user's comments from all posts
            const allPosts = await db.collection('posts').get();
            const commentDeletes = [];

            for (const postDoc of allPosts.docs) {
                const commentsSnapshot = await postDoc.ref.collection('comments')
                    .where('userId', '==', userId)
                    .get();

                commentsSnapshot.forEach(commentDoc => {
                    commentDeletes.push(commentDoc.ref.delete());
                });
            }

            await Promise.all(commentDeletes);

            // Delete user's notifications
            const notificationsSnapshot = await db.collection('notifications')
                .doc(userId)
                .collection('userNotifications')
                .get();

            const notificationDeletes = notificationsSnapshot.docs.map(doc => doc.ref.delete());
            await Promise.all(notificationDeletes);

            // Remove user from others' followers/following
            const allUsers = await db.collection('users').get();
            const userUpdatePromises = [];

            for (const userDoc of allUsers.docs) {
                const userData = userDoc.data();
                const updates = {};

                if (userData.followers && userData.followers.includes(userId)) {
                    updates.followers = firebase.firestore.FieldValue.arrayRemove(userId);
                }

                if (userData.following && userData.following.includes(userId)) {
                    updates.following = firebase.firestore.FieldValue.arrayRemove(userId);
                }

                if (Object.keys(updates).length > 0) {
                    userUpdatePromises.push(userDoc.ref.update(updates));
                }
            }

            await Promise.all(userUpdatePromises);

            // Finally delete the user document
            await db.collection('users').doc(userId).delete();

            return true;
        } catch (error) {
            console.error("Error deleting user data:", error);
            throw error;
        }
    }

    // User-friendly error messages
    function getFriendlyAuthError(error) {
        switch (error.code) {
            case 'auth/invalid-email':
                return 'Invalid email address format.';
            case 'auth/user-disabled':
                return 'This account has been disabled.';
            case 'auth/user-not-found':
                return 'No account found with this email.';
            case 'auth/wrong-password':
                return 'Incorrect password.';
            case 'auth/email-already-in-use':
                return 'This email is already registered.';
            case 'auth/weak-password':
                return 'Password should be at least 6 characters.';
            case 'auth/requires-recent-login':
                return 'Please log in again to perform this action.';
            default:
                return error.message;
        }
    }

    // User data functions
    function loadUserData(uid) {
        db.collection('users').doc(uid).get()
            .then(doc => {
                if (doc.exists) {
                    currentUserData = doc.data();
                    updateProfileUI(currentUserData);

                    // Load the profile we're viewing (default to current user)
                    if (!viewingProfileUserId) {
                        viewingProfileUserId = uid;
                        loadProfilePosts();
                    }

                    // Update notification settings toggles
                    if (currentUserData.notificationsEnabled) {
                        document.getElementById('notifFollowersToggle').checked = currentUserData.notificationsEnabled.followers;
                        document.getElementById('notifLikesToggle').checked = currentUserData.notificationsEnabled.likes;
                        document.getElementById('notifMentionsToggle').checked = currentUserData.notificationsEnabled.mentions;
                    }
                }
            })
            .catch(error => {
                console.error("Error loading user data:", error);
            });
    }

    function updateProfileUI(userData) {
        profileName.textContent = userData.name;
        profileUsername.textContent = `@${userData.username}`;
        profileBio.textContent = userData.bio || "No bio yet";
        document.getElementById('profileFollowersCount').textContent = userData.followers ? userData.followers.length : 0;
        document.getElementById('profileFollowingCount').textContent = userData.following ? userData.following.length : 0;

        // Update settings form
        if (document.getElementById('settingsName')) {
            document.getElementById('settingsName').value = userData.name;
            document.getElementById('settingsBio').value = userData.bio || "";
        }

        // Update profile avatar
        if (userData.avatarType === 'emoji') {
            profileAvatarContent.textContent = userData.avatarValue || '😊';
            profileAvatarContent.style.fontSize = '2rem';
            profileAvatar.style.backgroundColor = 'transparent';
        } else {
            profileAvatarContent.textContent = userData.avatarValue || userData.name.substring(0, 2).toUpperCase();
            profileAvatarContent.style.fontSize = '1.2rem';
            profileAvatar.style.backgroundColor = '#4ECDC4'; // Default color
        }

        // Update follow button if viewing another profile
        if (viewingProfileUserId && viewingProfileUserId !== currentUser?.uid) {
            updateFollowButton(userData);
        } else {
            followButton.style.display = 'none';
        }
    }

    function updateFollowButton(userData) {
        if (!currentUser || !viewingProfileUserId) return;

        followButton.style.display = 'block';
        followButton.disabled = false;

        if (userData.followers && userData.followers.includes(currentUser.uid)) {
            followButton.textContent = 'Following';
            followButton.classList.add('following');
        } else {
            followButton.textContent = 'Follow';
            followButton.classList.remove('following');
        }
    }

    function toggleFollow() {
        if (!currentUser || !viewingProfileUserId || viewingProfileUserId === currentUser.uid) return;

        const isFollowing = followButton.textContent === 'Following';

        if (isFollowing) {
            // Unfollow logic
            db.collection('users').doc(currentUser.uid).update({
                following: firebase.firestore.FieldValue.arrayRemove(viewingProfileUserId)
            });

            db.collection('users').doc(viewingProfileUserId).update({
                followers: firebase.firestore.FieldValue.arrayRemove(currentUser.uid)
            }).then(() => {
                followButton.textContent = 'Follow';
                followButton.classList.remove('following');
                updateFollowerCount();

                // Update current user data
                if (currentUserData.following) {
                    currentUserData.following = currentUserData.following.filter(id => id !== viewingProfileUserId);
                }
            });
        } else {
            // Follow logic
            db.collection('users').doc(currentUser.uid).update({
                following: firebase.firestore.FieldValue.arrayUnion(viewingProfileUserId)
            });

            db.collection('users').doc(viewingProfileUserId).update({
                followers: firebase.firestore.FieldValue.arrayUnion(currentUser.uid)
            }).then(() => {
                followButton.textContent = 'Following';
                followButton.classList.add('following');
                updateFollowerCount();

                // Update current user data
                if (!currentUserData.following) {
                    currentUserData.following = [];
                }
                currentUserData.following.push(viewingProfileUserId);

                // Send notification if enabled
                sendNotification(viewingProfileUserId, 'follow', currentUser.uid);
            });
        }
    }

    function updateFollowerCount() {
        if (viewingProfileUserId) {
            db.collection('users').doc(viewingProfileUserId).get()
                .then(doc => {
                    if (doc.exists) {
                        const userData = doc.data();
                        document.getElementById('profileFollowersCount').textContent = userData.followers ? userData.followers.length : 0;
                    }
                });
        }
    }

    // Post functions
    async function createPost(e) {
        e.preventDefault();

        const title = document.getElementById('postTitle').value;
        const description = document.getElementById('postDescription').value;
        const author = document.getElementById('postAuthor').value;

        // Check for sensitive content
        const isSensitive = await checkContentSensitivity(description);
        
        const postBtn = e.target.querySelector('button');
        const originalText = postBtn.innerHTML;
        postBtn.innerHTML = '<div class="loading"></div>';
        postBtn.disabled = true;

        // Create post in Firestore
        const postData = {
            title,
            description,
            author,
            userId: currentUser.uid,
            userName: currentUserData.name,
            userUsername: currentUserData.username,
            createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            likes: [],
            commentsCount: 0,
            shares: 0,
            isSensitive: isSensitive
        };

        if (selectedPostColor !== 'default') {
            postData.bgColor = selectedPostColor;
        }

        db.collection('posts').add(postData)
            .then(docRef => {
                // Update user's post count
                return db.collection('users').doc(currentUser.uid).update({
                    postCount: firebase.firestore.FieldValue.increment(1)
                }).then(() => docRef.id);
            })
            .then(postId => {
                postBtn.innerHTML = originalText;
                postBtn.disabled = false;
                togglePostFormContainer();
                loadPosts();
                loadProfilePosts();
                showCustomModal('Success', 'Post created successfully!');

                // Generate shareable link
                generatePostLink(postId);
            })
            .catch(error => {
                postBtn.innerHTML = originalText;
                postBtn.disabled = false;
                showCustomModal('Error', 'Error creating post: ' + error.message);
            });
    }

    function generatePostLink(postId) {
        const currentUrl = window.location.href.split('?')[0]; // Remove existing query params
        return `${currentUrl}?postid=${postId}`;
    }

    function loadPosts() {
        if (!currentUser) return;

        // Check if there's a post ID in the URL
        const urlParams = new URLSearchParams(window.location.search);
        const postId = urlParams.get('postid');

        if (postId) {
            // Load specific post
            loadSpecificPost(postId);
        } else {
            loadAllPosts();
        }
    }

    function loadSpecificPost(postId) {
        db.collection('posts').doc(postId).get()
            .then(doc => {
                if (doc.exists) {
                    publishedContent.innerHTML = '';
                    const post = doc.data();
                    post.id = doc.id;
                    posts = [post];
                    renderPost(post, publishedContent);
                    // Scroll to the post
                    setTimeout(() => {
                        const postElement = document.querySelector(`.post[data-id="${post.id}"]`);
                        if (postElement) {
                            postElement.scrollIntoView({
                                behavior: 'smooth'
                            });
                        }
                    }, 100);
                } else {
                    loadAllPosts();
                }
            })
            .catch(() => {
                loadAllPosts();
            });
    }

    function loadAllPosts() {
        // Get all posts, shuffle them, and sort by engagement
        db.collection('posts')
            .orderBy('createdAt', 'desc')
            .limit(50)
            .get()
            .then(querySnapshot => {
                publishedContent.innerHTML = '';
                posts = [];

                if (querySnapshot.empty) {
                    publishedContent.innerHTML = `
                        <div class="empty-state">
                            <i class="fas fa-edit"></i>
                            <h3>No posts yet</h3>
                            <p>Follow some users or create your first post</p>
                        </div>
                    `;
                    return;
                }

                // Convert to array and shuffle
                let postsArray = [];
                querySnapshot.forEach(doc => {
                    const post = doc.data();
                    post.id = doc.id;
                    postsArray.push(post);
                });

                // Shuffle array
                postsArray = shuffleArray(postsArray);
                
                // Sort by engagement (likes + comments * 2 + shares * 3)
                postsArray.sort((a, b) => {
                    const engagementA = (a.likes?.length || 0) + (a.commentsCount || 0) * 2 + (a.shares || 0) * 3;
                    const engagementB = (b.likes?.length || 0) + (b.commentsCount || 0) * 2 + (b.shares || 0) * 3;
                    return engagementB - engagementA;
                });

                posts = postsArray;
                
                // Render posts
                posts.forEach(post => {
                    renderPost(post, publishedContent);
                });
            })
            .catch(error => {
                showCustomModal('Error', 'Failed to load posts: ' + error.message);
            });
    }

    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
        return array;
    }

    function loadProfilePosts() {
        if (!currentUser || !viewingProfileUserId) return;

        const profilePostsContainer = document.getElementById('profilePosts');

        db.collection('posts')
            .where('userId', '==', viewingProfileUserId)
            .orderBy('createdAt', 'desc')
            .limit(20)
            .get()
            .then(querySnapshot => {
                profilePostsContainer.innerHTML = '';

                if (querySnapshot.empty) {
                    profilePostsContainer.innerHTML = `
                        <div class="empty-state">
                            <i class="fas fa-edit"></i>
                            <h3>No posts yet</h3>
                            <p>Create your first post to share with others</p>
                        </div>
                    `;
                    return;
                }

                querySnapshot.forEach(doc => {
                    const post = doc.data();
                    post.id = doc.id;
                    renderPost(post, profilePostsContainer);
                });
            })
            .catch(error => {
                showCustomModal('Error', 'Failed to load profile posts: ' + error.message);
            });
    }

    function renderPost(post, container, isProfileView = false) {
        const postElement = document.createElement('div');
        postElement.className = 'post';
        postElement.setAttribute('data-id', post.id);
        if (post.bgColor) {
            postElement.setAttribute('data-bg-color', post.bgColor);
        }

        // Format date
        const date = post.createdAt.toDate();
        const formattedDate = formatDate(date);

        // Check if description is long
        const isLongDescription = post.description.length > 200;
        const displayDescription = isLongDescription ?
            post.description.substring(0, 200) + '...' :
            post.description;

        // Generate shareable link
        const postLink = generatePostLink(post.id);

        // Get user avatar
        let userAvatar = post.userName.charAt(0).toUpperCase();
        if (post.userAvatarType === 'emoji') {
            userAvatar = post.userAvatarValue || '😊';
        }

        postElement.innerHTML = `
            <div class="post-header">
                <div class="post-user" onclick="${isProfileView ? '' : `viewUserProfile('${post.userId}')`}">
                    <div class="user-avatar" style="${post.userAvatarType === 'emoji' ? 'font-size: 1.5rem; background-color: transparent;' : ''}">${userAvatar}</div>
                    <div>
                        <div class="user-name">${post.userName}</div>
                        <small>${formattedDate}</small>
                    </div>
                </div>
                <div class="post-actions">
                    <i class="fas fa-ellipsis-v post-menu" onclick="togglePostMenu(this, '${post.id}')"></i>
                    <div class="post-menu-options">
                        ${post.userId === currentUser?.uid ? `
                        <button onclick="showEditPostModal('${post.id}')"><i class="fas fa-edit"></i> Edit</button>
                        <button onclick="deletePost('${post.id}')" class="delete"><i class="fas fa-trash"></i> Delete</button>
                        ` : ''}
                        <button onclick="copyToClipboard('${postLink}')"><i class="fas fa-link"></i> Copy Link</button>
                    </div>
                </div>
            </div>
            <div class="post-content">
                ${post.title ? `<h3>${post.title}</h3>` : ''}
                ${post.isSensitive ? `
                <div class="sensitive-content-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h4>This content may contain sensitive material</h4>
                    <p>Would you like to view this content?</p>
                    <button onclick="revealSensitiveContent(this, '${post.id}')">Show Content</button>
                </div>
                <div class="post-description sensitive" style="display: none;">
                    ${displayDescription.replace(/\n/g, '<br>')}
                </div>
                ` : `
                <div class="post-description ${isLongDescription ? 'collapsed' : ''}">
                    ${displayDescription.replace(/\n/g, '<br>')}
                </div>
                `}
                ${post.author ? `<div class="post-author"><small>Source: ${post.author}</small></div>` : ''}
                ${isLongDescription && !post.isSensitive ? `<div class="read-more" onclick="expandPostDescription(this)">Read more</div>` : ''}
            </div>
            <div class="post-footer">
                <div class="post-stats">
                    <div class="post-stat" onclick="likePost('${post.id}')">
                        <i class="fas fa-heart ${post.likes?.includes(currentUser?.uid) ? 'liked' : ''}"></i>
                        <span>${post.likes?.length || 0}</span>
                    </div>
                    <div class="post-stat" onclick="showCommentsModal('${post.id}')">
                        <i class="fas fa-comment"></i>
                        <span>${post.commentsCount || 0}</span>
                    </div>
                    <div class="post-stat" onclick="sharePost('${post.id}')">
                        <i class="fas fa-share"></i>
                        <span>${post.shares || 0}</span>
                    </div>
                </div>
            </div>
        `;

        container.appendChild(postElement);
    }

    function revealSensitiveContent(button, postId) {
        const warning = button.parentElement;
        const content = warning.nextElementSibling;
        
        warning.style.display = 'none';
        content.style.display = 'block';
        
        // Check if content is long and needs "read more"
        const post = posts.find(p => p.id === postId);
        if (post && post.description.length > 200) {
            content.innerHTML += `<div class="read-more" onclick="expandPostDescription(this)">Read more</div>`;
        }
    }

    function formatDate(date) {
        const now = new Date();
        const diff = now - date;
        const minutes = Math.floor(diff / 60000);
        const hours = Math.floor(diff / 3600000);
        const days = Math.floor(diff / 86400000);

        if (minutes < 1) return 'Just now';
        if (minutes < 60) return `${minutes}m ago`;
        if (hours < 24) return `${hours}h ago`;
        if (days < 7) return `${days}d ago`;

        return date.toLocaleDateString('en-US', {
            month: 'short',
            day: 'numeric',
            year: date.getFullYear() !== now.getFullYear() ? 'numeric' : undefined
        });
    }

    // Edit post functions
    function showEditPostModal(postId) {
        const post = posts.find(p => p.id === postId);
        if (!post) return;

        currentEditingPostId = postId;
        document.getElementById('editPostId').value = postId;
        document.getElementById('editPostTitle').value = post.title || '';
        document.getElementById('editPostDescription').value = post.description;
        document.getElementById('editPostAuthor').value = post.author || '';

        // Reset color options
        document.querySelectorAll('.edit-post-content .color-option').forEach(opt => {
            opt.classList.remove('selected');
            if (opt.getAttribute('data-color') === (post.bgColor || 'default')) {
                opt.classList.add('selected');
                selectedEditPostColor = post.bgColor || 'default';
            }
        });

        editPostModal.classList.add('show');
        document.body.style.overflow = 'hidden';
    }

    function hideEditPostModal() {
        editPostModal.classList.remove('show');
        document.body.style.overflow = 'auto';
        currentEditingPostId = null;
    }

    async function saveEditedPost() {
        const postId = document.getElementById('editPostId').value;
        const title = document.getElementById('editPostTitle').value;
        const description = document.getElementById('editPostDescription').value;
        const author = document.getElementById('editPostAuthor').value;

        if (!description.trim()) {
            showCustomModal('Error', 'Post description cannot be empty');
            return;
        }

        // Check for sensitive content
        const isSensitive = await checkContentSensitivity(description);

        const loading = showLoading('Saving changes...');

        const updateData = {
            title: title || null,
            description,
            author: author || null,
            isSensitive: isSensitive
        };

        if (selectedEditPostColor !== 'default') {
            updateData.bgColor = selectedEditPostColor;
        } else {
            updateData.bgColor = firebase.firestore.FieldValue.delete();
        }

        db.collection('posts').doc(postId).update(updateData)
            .then(() => {
                hideLoading(loading);
                hideEditPostModal();
                loadPosts();
                if (viewingProfileUserId) {
                    loadProfilePosts();
                }
                showCustomModal('Success', 'Post updated successfully!');
            })
            .catch(error => {
                hideLoading(loading);
                showCustomModal('Error', 'Failed to update post: ' + error.message);
            });
    }

    // Comments functions
    function loadComments(postId) {
        if (!postId) return;

        const commentsList = document.getElementById('commentsList');
        commentsList.innerHTML = '';

        db.collection('posts').doc(postId).collection('comments')
            .orderBy('createdAt', 'desc')
            .get()
            .then(querySnapshot => {
                commentsList.innerHTML = '';

                if (querySnapshot.empty) {
                    commentsList.innerHTML = `
                        <div class="empty-state">
                            <i class="fas fa-comment"></i>
                            <h3>No comments yet</h3>
                            <p>Be the first to comment</p>
                        </div>
                    `;
                    return;
                }

                querySnapshot.forEach(doc => {
                    const comment = doc.data();
                    comment.id = doc.id;
                    renderComment(comment, commentsList);
                });
            })
            .catch(error => {
                showCustomModal('Error', 'Failed to load comments: ' + error.message);
            });
    }

    function renderComment(comment, container) {
        const commentElement = document.createElement('div');
        commentElement.className = 'comment-item';

        // Format date
        const date = comment.createdAt.toDate();
        const formattedDate = formatDate(date);

        // Get user avatar
        let userAvatar = comment.userName.charAt(0).toUpperCase();
        if (comment.userAvatarType === 'emoji') {
            userAvatar = comment.userAvatarValue || '😊';
        }

        commentElement.innerHTML = `
            <div class="comment-header">
                <div class="comment-user" onclick="viewUserProfile('${comment.userId}')">
                    <div class="user-avatar small" style="${comment.userAvatarType === 'emoji' ? 'font-size: 1.2rem; background-color: transparent;' : ''}">${userAvatar}</div>
                    <div>
                        <div class="user-name">${comment.userName}</div>
                        <small>${formattedDate}</small>
                    </div>
                </div>
            </div>
            <div class="comment-content">
                ${comment.text}
            </div>
            <div class="comment-footer">
                <div class="comment-stat" onclick="likeComment('${comment.postId}', '${comment.id}')">
                    <i class="fas fa-heart ${comment.likes?.includes(currentUser?.uid) ? 'liked' : ''}"></i>
                    <span>${comment.likes?.length || 0}</span>
                </div>
                <div class="comment-reply" onclick="showReplyForm('${comment.id}', '${comment.userName}')">
                    <i class="fas fa-reply"></i>
                    <span>Reply</span>
                </div>
            </div>
            <div class="comment-reply-form" id="replyForm-${comment.id}" style="display: none;">
                <textarea placeholder="Reply to ${comment.userName}..." required></textarea>
                <button onclick="addReply('${comment.postId}', '${comment.id}')">Reply</button>
            </div>
        `;

        container.appendChild(commentElement);
    }

    function showReplyForm(commentId, userName) {
        const replyForm = document.getElementById(`replyForm-${commentId}`);
        if (replyForm.style.display === 'none') {
            replyForm.style.display = 'block';
            replyForm.querySelector('textarea').placeholder = `Reply to ${userName}...`;
        } else {
            replyForm.style.display = 'none';
        }
    }

    function addReply(postId, commentId) {
        const replyText = document.querySelector(`#replyForm-${commentId} textarea`).value.trim();
        
        if (!replyText) {
            showCustomModal('Error', 'Reply cannot be empty');
            return;
        }
        
        const replyData = {
            text: replyText,
            userId: currentUser.uid,
            userName: currentUserData.name,
            userUsername: currentUserData.username,
            userAvatarType: currentUserData.avatarType,
            userAvatarValue: currentUserData.avatarValue,
            createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            likes: [],
            postId: postId,
            parentCommentId: commentId
        };
        
        // Add reply to the comment's subcollection
        db.collection('posts').doc(postId).collection('comments').doc(commentId)
            .collection('replies').add(replyData)
            .then(() => {
                document.querySelector(`#replyForm-${commentId} textarea`).value = '';
                document.getElementById(`replyForm-${commentId}`).style.display = 'none';
                
                // Reload comments to show the new reply
                loadComments(postId);
            })
            .catch(error => {
                showCustomModal('Error', 'Failed to add reply: ' + error.message);
            });
    }

    function addComment(e) {
        e.preventDefault();
        const postId = document.getElementById('commentPostId').value;
        const text = document.getElementById('commentText').value.trim();

        if (!text) {
            showCustomModal('Error', 'Comment cannot be empty');
            return;
        }

        const commentBtn = e.target.querySelector('button');
        const originalText = commentBtn.innerHTML;
        commentBtn.innerHTML = '<div class="loading"></div>';
        commentBtn.disabled = true;

        const commentData = {
            text,
            userId: currentUser.uid,
            userName: currentUserData.name,
            userUsername: currentUserData.username,
            userAvatarType: currentUserData.avatarType,
            userAvatarValue: currentUserData.avatarValue,
            createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            likes: [],
            postId: postId
        };

        // Add comment to the post's subcollection
        db.collection('posts').doc(postId).collection('comments').add(commentData)
            .then(() => {
                // Update the post's comment count
                return db.collection('posts').doc(postId).update({
                    commentsCount: firebase.firestore.FieldValue.increment(1)
                });
            })
            .then(() => {
                commentBtn.innerHTML = originalText;
                commentBtn.disabled = false;
                document.getElementById('commentText').value = '';
                loadComments(postId);

                // Send notification to post owner
                const post = posts.find(p => p.id === postId);
                if (post && post.userId !== currentUser.uid) {
                    sendNotification(post.userId, 'comment', currentUser.uid, postId);
                }
            })
            .catch(error => {
                commentBtn.innerHTML = originalText;
                commentBtn.disabled = false;
                showCustomModal('Error', 'Failed to add comment: ' + error.message);
            });
    }

    function likeComment(postId, commentId) {
        if (!currentUser) {
            showCustomModal('Sign In Required', 'Please sign in to like comments');
            return;
        }

        const commentRef = db.collection('posts').doc(postId).collection('comments').doc(commentId);

        // First get the current likes
        commentRef.get()
            .then(doc => {
                if (doc.exists) {
                    const comment = doc.data();
                    const isLiked = comment.likes?.includes(currentUser.uid);

                    // Update the likes array
                    return commentRef.update({
                        likes: isLiked ?
                            firebase.firestore.FieldValue.arrayRemove(currentUser.uid) : firebase.firestore.FieldValue.arrayUnion(currentUser.uid)
                    });
                }
            })
            .then(() => {
                // Reload comments
                loadComments(postId);
            })
            .catch(error => {
                showCustomModal('Error', 'Failed to like comment: ' + error.message);
            });
    }

    // Post interaction functions
    function likePost(postId) {
        if (!currentUser) {
            showCustomModal('Sign In Required', 'Please sign in to like posts');
            return;
        }

        const post = posts.find(p => p.id === postId);
        const isLiked = post.likes?.includes(currentUser.uid);

        db.collection('posts').doc(postId).update({
                likes: isLiked ?
                    firebase.firestore.FieldValue.arrayRemove(currentUser.uid) : firebase.firestore.FieldValue.arrayUnion(currentUser.uid)
            })
            .then(() => {
                // Send notification if this is a like (not unlike)
                if (!isLiked && post.userId !== currentUser.uid) {
                    sendNotification(post.userId, 'like', currentUser.uid, postId);
                }

                loadPosts();
                if (viewingProfileUserId) {
                    loadProfilePosts();
                }
            })
            .catch(error => {
                showCustomModal('Error', 'Failed to like post: ' + error.message);
            });
    }

    function deletePost(postId) {
        showCustomModal('Confirm Delete', 'Are you sure you want to delete this post?', true, () => {
            const loading = showLoading('Deleting post...');

            // First delete all comments for this post
            db.collection('posts').doc(postId).collection('comments').get()
                .then(querySnapshot => {
                    const batch = db.batch();
                    querySnapshot.forEach(doc => {
                        batch.delete(doc.ref);
                    });
                    return batch.commit();
                })
                .then(() => {
                    // Then delete the post itself
                    return db.collection('posts').doc(postId).delete();
                })
                .then(() => {
                    // Update user's post count
                    return db.collection('users').doc(currentUser.uid).update({
                        postCount: firebase.firestore.FieldValue.increment(-1)
                    });
                })
                .then(() => {
                    hideLoading(loading);
                    loadPosts();
                    loadProfilePosts();
                    showCustomModal('Success', 'Post deleted successfully');
                })
                .catch(error => {
                    hideLoading(loading);
                    showCustomModal('Error', 'Failed to delete post: ' + error.message);
                });
        });
    }

    function sharePost(postId) {
        const post = posts.find(p => p.id === postId);
        const postLink = generatePostLink(postId);

        // Copy to clipboard
        copyToClipboard(postLink);

        // Update share count
        db.collection('posts').doc(postId).update({
                shares: firebase.firestore.FieldValue.increment(1)
            })
            .then(() => {
                loadPosts();
                if (viewingProfileUserId) {
                    loadProfilePosts();
                }
            })
            .catch(error => {
                showCustomModal('Error', 'Failed to share post: ' + error.message);
            });
    }

    function copyToClipboard(text) {
        navigator.clipboard.writeText(text).then(() => {
            showCustomModal('Copied', 'Link copied to clipboard!');
        }).catch(() => {
            // Fallback for older browsers
            const dummyInput = document.createElement('input');
            dummyInput.value = text;
            document.body.appendChild(dummyInput);
            dummyInput.select();
            document.execCommand('copy');
            document.body.removeChild(dummyInput);
            showCustomModal('Copied', 'Link copied to clipboard!');
        });
    }

    function expandPostDescription(element) {
        const descriptionContainer = element.previousElementSibling;
        const postId = element.closest('.post').getAttribute('data-id');
        const post = posts.find(p => p.id === postId);

        descriptionContainer.classList.remove('collapsed');
        descriptionContainer.innerHTML = post.description.replace(/\n/g, '<br>');
        element.style.display = 'none';
    }

    function togglePostMenu(icon, postId) {
        const menu = icon.nextElementSibling;
        menu.classList.toggle('show');

        // Close other open menus
        document.querySelectorAll('.post-menu-options').forEach(otherMenu => {
            if (otherMenu !== menu && otherMenu.classList.contains('show')) {
                otherMenu.classList.remove('show');
            }
        });

        // Close when clicking outside
        document.addEventListener('click', function closeMenu(e) {
            if (!menu.contains(e.target) && e.target !== icon) {
                menu.classList.remove('show');
                document.removeEventListener('click', closeMenu);
            }
        });
    }

    // Profile functions
    function viewUserProfile(userId) {
        if (userId === currentUser?.uid) {
            // Viewing own profile - show in section
            viewingProfileUserId = userId;
            showSection('profile');
            followButton.style.display = 'none';
            loadProfilePosts();
        } else {
            // Viewing another user's profile - show in full bottom sheet
            showProfileView(userId);
        }
    }

    function showProfileInSection(userId) {
        const loading = showLoading('Loading profile...');

        db.collection('users').doc(userId).get()
            .then(doc => {
                hideLoading(loading);

                if (doc.exists) {
                    const userData = doc.data();

                    // Update profile info
                    profileName.textContent = userData.name;
                    profileUsername.textContent = `@${userData.username}`;
                    profileBio.textContent = userData.bio || "No bio yet";
                    document.getElementById('profileFollowersCount').textContent = userData.followers ? userData.followers.length : 0;
                    document.getElementById('profileFollowingCount').textContent = userData.following ? userData.following.length : 0;

                    // Update profile avatar
                    if (userData.avatarType === 'emoji') {
                        profileAvatarContent.textContent = userData.avatarValue || '😊';
                        profileAvatarContent.style.fontSize = '2rem';
                        profileAvatar.style.backgroundColor = 'transparent';
                    } else {
                        profileAvatarContent.textContent = userData.avatarValue || userData.name.substring(0, 2).toUpperCase();
                        profileAvatarContent.style.fontSize = '1.2rem';
                        profileAvatar.style.backgroundColor = '#4ECDC4'; // Default color
                    }

                    // Update follow button
                    updateFollowButton(userData);

                    // Show profile section
                    showSection('profile');
                    loadProfilePosts();
                }
            })
            .catch(error => {
                hideLoading(loading);
                showCustomModal('Error', 'Failed to load profile: ' + error.message);
            });
    }

    function shareProfile(userId = null) {
        const profileId = userId || currentUser.uid;
        const currentUrl = window.location.href.split('?')[0]; // Remove existing query params
        const profileUrl = `${currentUrl}?profileid=${profileId}`;

        // Copy to clipboard
        copyToClipboard(profileUrl);
    }

    function showProfileMenu() {
        const menu = document.getElementById('profileMenu');
        menu.style.display = 'block';
        document.body.style.overflow = 'hidden';

        // Close when clicking outside
        setTimeout(() => {
            document.addEventListener('click', function closeMenu(e) {
                if (!menu.contains(e.target)) {
                    menu.style.display = 'none';
                    document.body.style.overflow = 'auto';
                    document.removeEventListener('click', closeMenu);
                }
            });
        }, 0);
    }

    function editProfile() {
        // Show settings section with profile tab active
        showSection('settings');
        document.getElementById('profileMenu').style.display = 'none';
        document.body.style.overflow = 'auto';
    }

    // Settings functions
    function saveProfileSettings() {
        if (!currentUser) return;

        const name = document.getElementById('settingsName').value;
        const bio = document.getElementById('settingsBio').value;

        const notificationsEnabled = {
            followers: document.getElementById('notifFollowersToggle').checked,
            likes: document.getElementById('notifLikesToggle').checked,
            mentions: document.getElementById('notifMentionsToggle').checked
        };

        const loading = showLoading('Saving profile...');

        db.collection('users').doc(currentUser.uid).update({
                name,
                bio,
                notificationsEnabled
            })
            .then(() => {
                hideLoading(loading);
                // Update current user data
                currentUserData.name = name;
                currentUserData.bio = bio;
                currentUserData.notificationsEnabled = notificationsEnabled;

                // Update profile UI
                updateProfileUI(currentUserData);
                showCustomModal('Success', 'Profile saved successfully!');
            })
            .catch(error => {
                hideLoading(loading);
                showCustomModal('Error', 'Failed to save profile: ' + error.message);
            });
    }

    function toggleDarkMode() {
        document.body.classList.toggle('dark-mode');

        if (document.body.classList.contains('dark-mode')) {
            localStorage.setItem('darkMode', 'enabled');
        } else {
            localStorage.setItem('darkMode', 'disabled');
        }
    }

    function showLegalDocument(type) {
        const modal = document.getElementById('legalModal');
        const title = document.getElementById('legalDocTitle');
        const content = document.getElementById('legalDocContent');

        if (type === 'privacy') {
            title.textContent = 'Privacy Policy';
            content.innerHTML = `
                <h2>Privacy Policy</h2>
                <p>This is a placeholder for the privacy policy. In a real application, you would include:</p>
                <ul>
                    <li>What information you collect</li>
                    <li>How you use that information</li>
                    <li>How you protect user data</li>
                    <li>User rights regarding their data</li>
                    <li>Cookies and tracking policies</li>
                    <li>Contact information for privacy concerns</li>
                </ul>
                <p>You should consult with a legal professional to create a proper privacy policy that complies with all applicable laws (GDPR, CCPA, etc.).</p>
            `;
        } else {
            title.textContent = 'Terms of Use';
            content.innerHTML = `
                <h2>Terms of Use</h2>
                <p>This is a placeholder for the terms of use. In a real application, you would include:</p>
                <ul>
                    <li>User responsibilities and acceptable use</li>
                    <li>Content ownership and licensing</li>
                    <li>Disclaimers and limitations of liability</li>
                    <li>Termination conditions</li>
                    <li>Governing law</li>
                    <li>Dispute resolution</li>
                </ul>
                <p>You should consult with a legal professional to create proper terms of use that protect your business and comply with applicable laws.</p>
            `;
        }

        modal.classList.add('show');
        document.body.style.overflow = 'hidden';
    }

    function hideLegalDocument() {
        document.getElementById('legalModal').classList.remove('show');
        document.body.style.overflow = 'auto';
    }

    // Find Users functions
    function showFindTab(tab) {
        document.getElementById('findUsersTab').style.display = 'none';
        document.getElementById('followersTab').style.display = 'none';
        document.getElementById('followingTab').style.display = 'none';

        if (tab === 'find') {
            document.getElementById('findUsersTab').style.display = 'block';
            loadAllUsers();
        } else if (tab === 'followers') {
            document.getElementById('followersTab').style.display = 'block';
            loadFollowers();
        } else if (tab === 'following') {
            document.getElementById('followingTab').style.display = 'block';
            loadFollowing();
        }
    }

    function loadAllUsers() {
        if (!currentUser) return;

        const usersContainer = document.getElementById('findUsersTab');
        usersContainer.innerHTML = '';

        db.collection('users')
            .orderBy('name')
            .limit(20)
            .get()
            .then(querySnapshot => {
                usersContainer.innerHTML = '';

                if (querySnapshot.empty) {
                    usersContainer.innerHTML = `
                        <div class="empty-state">
                            <i class="fas fa-users"></i>
                            <h3>No users found</h3>
                        </div>
                    `;
                    return;
                }

                querySnapshot.forEach(doc => {
                    if (doc.id === currentUser.uid) return; // Skip current user

                    const user = doc.data();
                    const isFollowing = currentUserData.following && currentUserData.following.includes(doc.id);

                    const userElement = document.createElement('div');
                    userElement.className = 'user-item';
                    userElement.innerHTML = `
                        <div class="user-item-info" onclick="showProfileView('${doc.id}')">
                            <div class="user-item-avatar" style="${user.avatarType === 'emoji' ? 'font-size: 1.5rem; background-color: transparent;' : ''}">${user.avatarType === 'emoji' ? (user.avatarValue || '😊') : (user.avatarValue || user.name.charAt(0).toUpperCase())}</div>
                            <div>
                                <div class="user-item-name">${user.name}</div>
                                <div class="user-item-username">@${user.username}</div>
                            </div>
                        </div>
                        <button class="follow-btn ${isFollowing ? 'following' : ''}" 
                            onclick="toggleFollowListUser('${doc.id}', this, 'find')">
                            ${isFollowing ? 'Following' : 'Follow'}
                        </button>
                    `;

                    usersContainer.appendChild(userElement);
                });
            });
    }

    function loadFollowers() {
        if (!currentUser || !viewingProfileUserId) return;

        const followersContainer = document.getElementById('followersTab');
        followersContainer.innerHTML = '';

        db.collection('users').doc(viewingProfileUserId).get()
            .then(doc => {
                if (doc.exists) {
                    const userData = doc.data();
                    const followers = userData.followers || [];

                    if (followers.length === 0) {
                        followersContainer.innerHTML = `
                            <div class="empty-state">
                                <i class="fas fa-users"></i>
                                <h3>No followers yet</h3>
                            </div>
                        `;
                        return;
                    }

                    // Get follower details
                    db.collection('users')
                        .where('__name__', 'in', followers.slice(0, 10)) // Firestore limit of 10 for 'in' queries
                        .get()
                        .then(querySnapshot => {
                            followersContainer.innerHTML = '';

                            querySnapshot.forEach(doc => {
                                const user = doc.data();
                                const isFollowing = currentUserData.following && currentUserData.following.includes(doc.id);

                                const userElement = document.createElement('div');
                                userElement.className = 'user-item';
                                userElement.innerHTML = `
                                    <div class="user-item-info" onclick="showProfileView('${doc.id}')">
                                        <div class="user-item-avatar" style="${user.avatarType === 'emoji' ? 'font-size: 1.5rem; background-color: transparent;' : ''}">${user.avatarType === 'emoji' ? (user.avatarValue || '😊') : (user.avatarValue || user.name.charAt(0).toUpperCase())}</div>
                                        <div>
                                            <div class="user-item-name">${user.name}</div>
                                            <div class="user-item-username">@${user.username}</div>
                                        </div>
                                    </div>
                                    ${doc.id !== currentUser.uid ? `
                                    <button class="follow-btn ${isFollowing ? 'following' : ''}" 
                                        onclick="toggleFollowListUser('${doc.id}', this, 'followers')">
                                        ${isFollowing ? 'Following' : 'Follow Back'}
                                    </button>
                                    ` : ''}
                                `;

                                followersContainer.appendChild(userElement);
                            });
                        });
                }
            });
    }

    function loadFollowing() {
        if (!currentUser || !viewingProfileUserId) return;

        const followingContainer = document.getElementById('followingTab');
        followingContainer.innerHTML = '';

        db.collection('users').doc(viewingProfileUserId).get()
            .then(doc => {
                if (doc.exists) {
                    const userData = doc.data();
                    const following = userData.following || [];

                    if (following.length === 0) {
                        followingContainer.innerHTML = `
                            <div class="empty-state">
                                <i class="fas fa-users"></i>
                                <h3>Not following anyone yet</h3>
                            </div>
                        `;
                        return;
                    }

                    // Get following details
                    db.collection('users')
                        .where('__name__', 'in', following.slice(0, 10)) // Firestore limit of 10 for 'in' queries
                        .get()
                        .then(querySnapshot => {
                            followingContainer.innerHTML = '';

                            querySnapshot.forEach(doc => {
                                const user = doc.data();
                                const isFollowing = currentUserData.following && currentUserData.following.includes(doc.id);

                                const userElement = document.createElement('div');
                                userElement.className = 'user-item';
                                userElement.innerHTML = `
                                    <div class="user-item-info" onclick="showProfileView('${doc.id}')">
                                        <div class="user-item-avatar" style="${user.avatarType === 'emoji' ? 'font-size: 1.5rem; background-color: transparent;' : ''}">${user.avatarType === 'emoji' ? (user.avatarValue || '😊') : (user.avatarValue || user.name.charAt(0).toUpperCase())}</div>
                                        <div>
                                            <div class="user-item-name">${user.name}</div>
                                            <div class="user-item-username">@${user.username}</div>
                                        </div>
                                    </div>
                                    ${doc.id !== currentUser.uid ? `
                                    <button class="follow-btn ${isFollowing ? 'following' : ''}" 
                                        onclick="toggleFollowListUser('${doc.id}', this, 'following')">
                                        ${isFollowing ? 'Following' : 'Follow'}
                                    </button>
                                    ` : ''}
                                `;

                                followingContainer.appendChild(userElement);
                            });
                        });
                }
            });
    }

    function toggleFollowListUser(userId, button, listType) {
        const isFollowing = button.textContent === 'Following';

        if (isFollowing) {
            // Unfollow
            db.collection('users').doc(currentUser.uid).update({
                following: firebase.firestore.FieldValue.arrayRemove(userId)
            });

            db.collection('users').doc(userId).update({
                followers: firebase.firestore.FieldValue.arrayRemove(currentUser.uid)
            }).then(() => {
                button.textContent = listType === 'followers' ? 'Follow Back' : 'Follow';
                button.classList.remove('following');

                // Update current user data
                if (currentUserData.following) {
                    currentUserData.following = currentUserData.following.filter(id => id !== userId);
                }
            });
        } else {
            // Follow
            db.collection('users').doc(currentUser.uid).update({
                following: firebase.firestore.FieldValue.arrayUnion(userId)
            });

            db.collection('users').doc(userId).update({
                followers: firebase.firestore.FieldValue.arrayUnion(currentUser.uid)
            }).then(() => {
                button.textContent = 'Following';
                button.classList.add('following');

                // Update current user data
                if (!currentUserData.following) {
                    currentUserData.following = [];
                }
                currentUserData.following.push(userId);

                // Send notification
                sendNotification(userId, 'follow', currentUser.uid);
            });
        }
    }

    // Notification functions
    function sendNotification(userId, type, senderId, postId = null) {
        if (!userId || !type || !senderId) return;

        // Check if user has notifications enabled for this type
        db.collection('users').doc(userId).get()
            .then(doc => {
                if (doc.exists) {
                    const userData = doc.data();
                    const notificationsEnabled = userData.notificationsEnabled || {
                        followers: true,
                        likes: true,
                        mentions: true
                    };

                    let shouldSend = false;
                    let message = "";

                    switch (type) {
                        case 'follow':
                            shouldSend = notificationsEnabled.followers;
                            message = "started following you";
                            break;
                        case 'like':
                            shouldSend = notificationsEnabled.likes;
                            message = "liked your post";
                            break;
                        case 'comment':
                            shouldSend = notificationsEnabled.likes;
                            message = "commented on your post";
                            break;
                        case 'mention':
                            shouldSend = notificationsEnabled.mentions;
                            message = "mentioned you in a post";
                            break;
                    }

                    if (shouldSend) {
                        const notification = {
                            type,
                            senderId,
                            message,
                            read: false,
                            timestamp: firebase.firestore.FieldValue.serverTimestamp()
                        };

                        if (postId) {
                            notification.postId = postId;
                        }

                        // Add notification to user's collection
                        db.collection('notifications').doc(userId).collection('userNotifications').add(notification)
                            .then(() => {
                                // Update notification count
                                if (userId === currentUser?.uid) {
                                    notificationCount++;
                                    updateNotificationBadge();
                                }
                            });
                    }
                }
            });
    }

    function loadNotifications() {
        if (!currentUser) return;

        const notificationsContainer = document.getElementById('notificationsList');
        notificationsContainer.innerHTML = '';

        db.collection('notifications')
            .doc(currentUser.uid)
            .collection('userNotifications')
            .orderBy('timestamp', 'desc')
            .limit(20)
            .get()
            .then(querySnapshot => {
                notificationsContainer.innerHTML = '';
                notificationCount = 0;

                if (querySnapshot.empty) {
                    notificationsContainer.innerHTML = `
                        <div class="empty-state">
                            <i class="fas fa-bell"></i>
                            <h3>No notifications yet</h3>
                            <p>Your notifications will appear here</p>
                        </div>
                    `;
                    return;
                }

                querySnapshot.forEach(doc => {
                    const notification = doc.data();
                    if (!notification.read) {
                        notificationCount++;
                    }

                    // Get sender info
                    db.collection('users').doc(notification.senderId).get()
                        .then(userDoc => {
                            if (userDoc.exists) {
                                const user = userDoc.data();
                                renderNotification(doc.id, notification, user, notificationsContainer);
                            }
                        });
                });

                updateNotificationBadge();
            });
    }

    function renderNotification(notificationId, notification, sender, container) {
        const notificationElement = document.createElement('div');
        notificationElement.className = `notification-item ${notification.read ? '' : 'unread'}`;

        // Format time
        const time = notification.timestamp.toDate();
        const formattedTime = formatDate(time);

        // Get sender avatar
        let senderAvatar = sender.name.charAt(0).toUpperCase();
        if (sender.avatarType === 'emoji') {
            senderAvatar = sender.avatarValue || '😊';
        }

        notificationElement.innerHTML = `
            <div class="notification-content" onclick="markNotificationAsRead('${notificationId}')">
                <div class="notification-avatar" style="${sender.avatarType === 'emoji' ? 'font-size: 1.5rem; background-color: transparent;' : ''}">${senderAvatar}</div>
                <div class="notification-text">
                    <strong>${sender.name}</strong> ${notification.message}
                    <div class="notification-time">${formattedTime}</div>
                </div>
                ${!notification.read ? '<span class="notification-badge"></span>' : ''}
            </div>
            ${notification.postId ? `
            <div class="notification-actions">
                <button class="follow-btn" onclick="viewNotificationPost('${notification.postId}')">View Post</button>
            </div>
            ` : ''}
        `;

        container.appendChild(notificationElement);
    }

    function markNotificationAsRead(notificationId) {
        if (!currentUser) return;

        db.collection('notifications')
            .doc(currentUser.uid)
            .collection('userNotifications')
            .doc(notificationId)
            .update({
                read: true
            })
            .then(() => {
                // Reload notifications
                loadNotifications();
            });
    }

    function markAllAsRead() {
        if (!currentUser) return;

        // Get all unread notifications
        db.collection('notifications')
            .doc(currentUser.uid)
            .collection('userNotifications')
            .where('read', '==', false)
            .get()
            .then(querySnapshot => {
                const batch = db.batch();

                querySnapshot.forEach(doc => {
                    const ref = db.collection('notifications')
                        .doc(currentUser.uid)
                        .collection('userNotifications')
                        .doc(doc.id);
                    batch.update(ref, {
                        read: true
                    });
                });

                return batch.commit();
            })
            .then(() => {
                loadNotifications();
                hideNotificationSettingsMenu();
            });
    }

    function viewNotificationPost(postId) {
        // Update URL to include post ID
        const currentUrl = window.location.href.split('?')[0];
        const newUrl = `${currentUrl}?postid=${postId}`;

        // Update URL without reloading if we're on the same page
        if (window.location.href.startsWith(currentUrl)) {
            window.history.pushState({}, '', newUrl);
            loadPosts();
        } else {
            // Open in new tab if we're not on the same domain
            window.open(newUrl, '_blank');
        }
    }

    function updateNotificationBadge() {
        const badge = document.getElementById('notificationBadge');
        if (notificationCount > 0) {
            badge.textContent = notificationCount > 9 ? '9+' : notificationCount;
            badge.style.display = 'flex';
        } else {
            badge.style.display = 'none';
        }
    }

    function showNotificationSettings() {
        const menu = document.getElementById('notificationSettingsMenu');
        menu.style.display = 'block';
        document.body.style.overflow = 'hidden';

        // Close when clicking outside
        setTimeout(() => {
            document.addEventListener('click', function closeMenu(e) {
                if (!menu.contains(e.target)) {
                    menu.style.display = 'none';
                    document.body.style.overflow = 'auto';
                    document.removeEventListener('click', closeMenu);
                }
            });
        }, 0);
    }

    function hideNotificationSettingsMenu() {
        document.getElementById('notificationSettingsMenu').style.display = 'none';
        document.body.style.overflow = 'auto';
    }

    // Explore and Search functions
    function debounceSearch() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
            const query = document.getElementById('searchQuery').value.trim();
            if (query.length > 2) {
                searchContent();
            }
        }, 500);
    }

    function searchContent() {
        const query = document.getElementById('searchQuery').value.trim();
        if (!query) return;

        const resultsContainer = document.getElementById('searchResults');
        resultsContainer.innerHTML = '';

        // Search users (name or username)
        db.collection('users')
            .where('name', '>=', query)
            .where('name', '<=', query + '\uf8ff')
            .limit(5)
            .get()
            .then(userSnapshot => {
                // Also search by username
                return db.collection('users')
                    .where('username', '>=', query.toLowerCase())
                    .where('username', '<=', query.toLowerCase() + '\uf8ff')
                    .limit(5)
                    .get()
                    .then(usernameSnapshot => {
                        // Combine results
                        const users = [];
                        const userMap = new Map();

                        userSnapshot.forEach(doc => {
                            if (!userMap.has(doc.id)) {
                                userMap.set(doc.id, true);
                                users.push({
                                    id: doc.id,
                                    ...doc.data()
                                });
                            }
                        });

                        usernameSnapshot.forEach(doc => {
                            if (!userMap.has(doc.id)) {
                                userMap.set(doc.id, true);
                                users.push({
                                    id: doc.id,
                                    ...doc.data()
                                });
                            }
                        });

                        return users;
                    });
            })
            .then(users => {
                // Search posts (title or content)
                return db.collection('posts')
                    .where('description', '>=', query)
                    .where('description', '<=', query + '\uf8ff')
                    .limit(5)
                    .get()
                    .then(postSnapshot => {
                        const resultsContainer = document.getElementById('searchResults');
                        resultsContainer.innerHTML = '';

                        if (users.length === 0 && postSnapshot.empty) {
                            resultsContainer.innerHTML = `
                                <div class="empty-state">
                                    <i class="fas fa-search"></i>
                                    <h3>No results found</h3>
                                    <p>Try a different search term</p>
                                </div>
                            `;
                            return;
                        }

                        // Show users
                        if (users.length > 0) {
                            const userHeader = document.createElement('h3');
                            userHeader.textContent = 'Users';
                            resultsContainer.appendChild(userHeader);

                            users.forEach(user => {
                                const isFollowing = currentUserData.following && currentUserData.following.includes(user.id);

                                const userElement = document.createElement('div');
                                userElement.className = 'user-item';
                                userElement.innerHTML = `
                                    <div class="user-item-info" onclick="showProfileView('${user.id}')">
                                        <div class="user-item-avatar" style="${user.avatarType === 'emoji' ? 'font-size: 1.5rem; background-color: transparent;' : ''}">${user.avatarType === 'emoji' ? (user.avatarValue || '😊') : (user.avatarValue || user.name.charAt(0).toUpperCase())}</div>
                                        <div>
                                            <div class="user-item-name">${user.name}</div>
                                            <div class="user-item-username">@${user.username}</div>
                                        </div>
                                    </div>
                                    ${user.id !== currentUser.uid ? `
                                    <button class="follow-btn ${isFollowing ? 'following' : ''}" 
                                        onclick="toggleSearchFollow('${user.id}', this)">
                                        ${isFollowing ? 'Following' : 'Follow'}
                                    </button>
                                    ` : ''}
                                `;

                                resultsContainer.appendChild(userElement);
                            });
                        }

                        // Show posts
                        if (!postSnapshot.empty) {
                            const postHeader = document.createElement('h3');
                            postHeader.textContent = 'Posts';
                            postHeader.style.marginTop = '2rem';
                            resultsContainer.appendChild(postHeader);

                            postSnapshot.forEach(doc => {
                                const post = doc.data();
                                post.id = doc.id;
                                renderPost(post, resultsContainer);
                            });
                        }
                    });
            });
    }

    function toggleSearchFollow(userId, button) {
        const isFollowing = button.textContent === 'Following';

        if (isFollowing) {
            // Unfollow
            db.collection('users').doc(currentUser.uid).update({
                following: firebase.firestore.FieldValue.arrayRemove(userId)
            });

            db.collection('users').doc(userId).update({
                followers: firebase.firestore.FieldValue.arrayRemove(currentUser.uid)
            }).then(() => {
                button.textContent = 'Follow';
                button.classList.remove('following');

                // Update current user data
                if (currentUserData.following) {
                    currentUserData.following = currentUserData.following.filter(id => id !== userId);
                }
            });
        } else {
            // Follow
            db.collection('users').doc(currentUser.uid).update({
                following: firebase.firestore.FieldValue.arrayUnion(userId)
            });

            db.collection('users').doc(userId).update({
                followers: firebase.firestore.FieldValue.arrayUnion(currentUser.uid)
            }).then(() => {
                button.textContent = 'Following';
                button.classList.add('following');

                // Update current user data
                if (!currentUserData.following) {
                    currentUserData.following = [];
                }
                currentUserData.following.push(userId);

                // Send notification
                sendNotification(userId, 'follow', currentUser.uid);
            });
        }
    }

    function loadSuggestedUsers() {
        if (!currentUser) return;

        // Get random users (simple approach)
        db.collection('users')
            .where('username', '!=', currentUserData.username)
            .limit(5)
            .get()
            .then(querySnapshot => {
                const suggestedUsersContainer = document.getElementById('suggestedUsers');
                suggestedUsersContainer.innerHTML = '';

                if (querySnapshot.empty) {
                    suggestedUsersContainer.innerHTML = '<div class="empty-state">No suggested users found</div>';
                    return;
                }

                querySnapshot.forEach(doc => {
                    const user = doc.data();
                    const isFollowing = currentUserData.following && currentUserData.following.includes(doc.id);

                    const userElement = document.createElement('div');
                    userElement.className = 'user-item';
                    userElement.innerHTML = `
                        <div class="user-item-info" onclick="showProfileView('${doc.id}')">
                            <div class="user-item-avatar" style="${user.avatarType === 'emoji' ? 'font-size: 1.5rem; background-color: transparent;' : ''}">${user.avatarType === 'emoji' ? (user.avatarValue || '😊') : (user.avatarValue || user.name.charAt(0).toUpperCase())}</div>
                            <div>
                                <div class="user-item-name">${user.name}</div>
                                <div class="user-item-username">@${user.username}</div>
                            </div>
                        </div>
                        <button class="follow-btn ${isFollowing ? 'following' : ''}" 
                            onclick="toggleSuggestedFollow('${doc.id}', this)">
                            ${isFollowing ? 'Following' : 'Follow'}
                        </button>
                    `;

                    suggestedUsersContainer.appendChild(userElement);
                });
            })
            .catch(error => {
                console.error("Error loading suggested users:", error);
            });
    }

    function loadSuggestedContent() {
        if (!currentUser) return;

        const suggestedContentContainer = document.getElementById('suggestedContent');
        suggestedContentContainer.innerHTML = '';

        // Get random posts
        db.collection('posts')
            .orderBy('createdAt', 'desc')
            .limit(10)
            .get()
            .then(querySnapshot => {
                suggestedContentContainer.innerHTML = '';

                if (querySnapshot.empty) {
                    suggestedContentContainer.innerHTML = `
                        <div class="empty-state">
                            <i class="fas fa-compass"></i>
                            <h3>No content suggestions</h3>
                            <p>Interact with more content to get personalized recommendations</p>
                        </div>
                    `;
                    return;
                }

                // Convert to array and shuffle
                let postsArray = [];
                querySnapshot.forEach(doc => {
                    const post = doc.data();
                    post.id = doc.id;
                    postsArray.push(post);
                });

                // Shuffle array
                postsArray = shuffleArray(postsArray);

                // Render posts
                postsArray.forEach(post => {
                    renderPost(post, suggestedContentContainer);
                });
            })
            .catch(error => {
                console.error("Error loading suggested content:", error);
            });
    }

    function toggleSuggestedFollow(userId, button) {
        if (!currentUser) return;

        const isFollowing = button.textContent === 'Following';

        if (isFollowing) {
            // Unfollow
            db.collection('users').doc(currentUser.uid).update({
                following: firebase.firestore.FieldValue.arrayRemove(userId)
            });

            db.collection('users').doc(userId).update({
                followers: firebase.firestore.FieldValue.arrayRemove(currentUser.uid)
            }).then(() => {
                button.textContent = 'Follow';
                button.classList.remove('following');

                // Update current user data
                if (currentUserData.following) {
                    currentUserData.following = currentUserData.following.filter(id => id !== userId);
                }
            });
        } else {
            // Follow
            db.collection('users').doc(currentUser.uid).update({
                following: firebase.firestore.FieldValue.arrayUnion(userId)
            });

            db.collection('users').doc(userId).update({
                followers: firebase.firestore.FieldValue.arrayUnion(currentUser.uid)
            }).then(() => {
                button.textContent = 'Following';
                button.classList.add('following');

                // Update current user data
                if (!currentUserData.following) {
                    currentUserData.following = [];
                }
                currentUserData.following.push(userId);

                // Send notification
                sendNotification(userId, 'follow', currentUser.uid);
            });
        }
    }

    // Utility functions
    function validateEmail(email) {
        const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return re.test(email);
    }

    function showLoading(message) {
        const loadingDiv = document.createElement('div');
        loadingDiv.className = 'loading-overlay';
        loadingDiv.innerHTML = `
            <div class="loading-content">
                <div class="loading-spinner"></div>
                <p>${message}</p>
            </div>
        `;
        document.body.appendChild(loadingDiv);
        return loadingDiv;
    }

    function hideLoading(loadingElement) {
        if (loadingElement && loadingElement.parentNode) {
            loadingElement.parentNode.removeChild(loadingElement);
        }
    }

    // Close sidebar when clicking outside
    document.addEventListener('click', function(e) {
        if (!sidebar.contains(e.target) && !e.target.classList.contains('fa-bars')) {
            sidebar.classList.remove('show');
            document.body.style.overflow = 'auto';
        }
    });

    // Handle URL parameters when page loads
    window.addEventListener('load', () => {
        const urlParams = new URLSearchParams(window.location.search);
        const profileId = urlParams.get('profileid');
        const postId = urlParams.get('postid');

        if ((profileId || postId) && auth.currentUser) {
            // Wait for user data to load
            const checkUserLoaded = setInterval(() => {
                if (currentUserData) {
                    clearInterval(checkUserLoaded);
                    if (profileId) {
                        viewUserProfile(profileId);
                    } else if (postId) {
                        showSection('home');
                    }
                }
            }, 100);
        }
    });

    // Handle browser back/forward buttons
    window.addEventListener('popstate', () => {
        checkUrlParameters();
    });
</script>
</body>
</html>